{"version":3,"sources":["../../src/SGFParser/SGFSyntaxError.ts","../../src/SGFParser/SGFParser.ts","../../src/types.ts","../../src/CanvasBoard/boardObjects/BoardObject.ts","../../src/CanvasBoard/boardObjects/FieldObject.ts","../../src/CanvasBoard/boardObjects/BoardMarkupObject.ts","../../src/CanvasBoard/boardObjects/BoardLabelObject.ts","../../src/CanvasBoard/boardObjects/BoardLineObject.ts","../../src/CanvasBoard/CanvasLayer.ts","../../src/CanvasBoard/ShadowLayer.ts","../../src/CanvasBoard/drawHandlers/DrawHandler.ts","../../src/CanvasBoard/drawHandlers/Stone.ts","../../src/CanvasBoard/drawHandlers/ShellStoneBlack.ts","../../src/CanvasBoard/drawHandlers/ShellStoneWhite.ts","../../src/CanvasBoard/drawHandlers/GlassStoneBlack.ts","../../src/CanvasBoard/drawHandlers/GlassStoneWhite.ts","../../src/CanvasBoard/drawHandlers/PaintedStoneBlack.ts","../../src/CanvasBoard/drawHandlers/PaintedStoneWhite.ts","../../src/CanvasBoard/drawHandlers/SimpleStone.ts","../../src/CanvasBoard/drawHandlers/RealisticStone.ts","../../src/CanvasBoard/drawHandlers/MarkupDrawHandler.ts","../../src/CanvasBoard/drawHandlers/ShapeMarkup.ts","../../src/CanvasBoard/drawHandlers/Circle.ts","../../src/CanvasBoard/drawHandlers/Square.ts","../../src/CanvasBoard/drawHandlers/Triangle.ts","../../src/CanvasBoard/drawHandlers/Label.ts","../../src/CanvasBoard/drawHandlers/Dot.ts","../../src/CanvasBoard/drawHandlers/XMark.ts","../../src/CanvasBoard/drawHandlers/Line.ts","../../src/CanvasBoard/drawHandlers/Arrow.ts","../../src/CanvasBoard/drawHandlers/Dim.ts","../../src/CanvasBoard/themes/baseTheme.ts","../../src/CanvasBoard/themes/realisticTheme.ts","../../src/CanvasBoard/themes/modernTheme.ts","../../src/CanvasBoard/defaultConfig.ts","../../src/utils/makeConfig.ts","../../src/utils/EventEmitter.ts","../../src/Game/rules.ts","../../src/CanvasBoard/GridLayer.ts","../../src/CanvasBoard/CanvasBoard.ts","../../src/Game/Position.ts","../../src/Game/Game.ts","../../src/kifu/propertyValueTypes.ts","../../src/kifu/KifuNode.ts","../../src/SGFParser/sgfTypes.ts","../../src/Player/propertyHandlers/PropertyHandler.ts","../../src/Player/propertyHandlers/SetupHandler.ts","../../src/Player/propertyHandlers/SetTurnHandler.ts","../../src/Player/propertyHandlers/BoardSizeHandler.ts","../../src/Player/propertyHandlers/RulesHandler.ts","../../src/Player/propertyHandlers/HandicapHandler.ts","../../src/Player/propertyHandlers/basePropertyHandlers.ts","../../src/Player/PlayerBase.ts","../../src/Player/propertyHandlers/MarkupHandler.ts","../../src/Player/propertyHandlers/MoveHandler.ts","../../src/Player/propertyHandlers/MarkupLineHandler.ts","../../src/Player/propertyHandlers/MarkupLabelHandler.ts","../../src/Player/propertyHandlers/ViewportHandler.ts","../../src/Player/PlainPlayer.ts","../../src/kifu/KifuReader.ts"],"names":["message","parser","__proto__","prototype","name","lineNo","charNo","sgfString","split","Array","join","Error","CODE_A","charCodeAt","CODE_Z","CODE_WHITE_CHAR","isCharUCLetter","char","charCode","Color","sgf","position","this","currentChar","nextChar","processChar","SGFSyntaxError","parsePropertyValue","optional","value","parsePropertyIdent","ident","parsePropertyValues","values","push","parseProperty","parseNode","property","properties","parseSequence","sequence","parseGameTree","children","parseCollection","gameTrees","type","zIndex","x","y","scaleX","scaleY","rotate","setPosition","setScale","factor","setOpacity","opacity","BoardObject","variation","E","FieldObject","text","BoardMarkupObject","start","end","board","init","element","document","createElement","style","width","height","context","getContext","scale","pixelRatio","save","boardElement","appendChild","resize","linesShift","config","theme","transform","draw","drawFunction","boardObject","leftOffset","getX","topOffset","getY","fieldSize","globalAlpha","res","restore","then","redraw","err","console","error","clear","clearRect","shadowOffsetX","shadowOffsetY","CanvasLayer","params","shadow","canvasCtx","boardConfig","stoneRadius","stoneSize","blur","shadowBlur","startRadius","Math","max","stopRadius","gradient","createRadialGradient","addColorStop","shadowColor","shadowTransparentColor","beginPath","fillStyle","arc","PI","fill","DrawHandler","stone","radGrad","Stone","shellSeed","ceil","random","size","z","angle","drawShell","ctx","radius","lines","thickness","arg","fromAngle","toAngle","i","length","drawShellLine","r","startAngle","endAngle","strokeStyle","lineWidth","m","diffX","diffY","x1","cos","y1","sin","x2","y2","atan","c","bx1","by1","bx2","by2","moveTo","bezierCurveTo","stroke","color","lw","markupLineWidth","paths","fallback","randSeed","images","loadImage","path","Promise","resolve","reject","image","Image","onload","onerror","src","count","idx","catch","filter","p","drawImage","grid","getColor","B","markupBlackColor","W","markupWhiteColor","markupNoneColor","drawShape","fillColor","MarkupDrawHandler","ShapeMarkup","rect","lineTo","closePath","font","fontSize","textBaseline","textAlign","fillText","sqrt","getLineX","t","getLineY","triangleLen","tx","ty","getBaseLineX","getBaseLineY","fillRect","baseTheme","backgroundColor","backgroundImage","linesWidth","linesColor","starColor","starSize","coordinates","bold","drawHandlers","drawHandlers.SimpleStone","CR","drawHandlers.Circle","SQ","drawHandlers.Square","LB","drawHandlers.Label","TR","drawHandlers.Triangle","MA","drawHandlers.XMark","SL","drawHandlers.Dot","LN","drawHandlers.Line","AR","drawHandlers.Arrow","DD","drawHandlers.Dim","realisticTheme","drawHandlers.RealisticStone","drawHandlers.GlassStoneBlack","drawHandlers.GlassStoneWhite","modernTheme","drawHandlers.ShellStoneBlack","drawHandlers.ShellStoneWhite","canvasBoardDefaultConfig","starPoints","5","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","viewport","top","right","bottom","left","marginSize","snapToGrid","makeConfig","defaults","mergedConfig","defaultKeys","Object","keys","forEach","key","val","defVal","constructor","isArray","undefined","indexOf","Repeating","_events","on","evName","callback","off","fn","emit","args","drawGrid","tmp","round","bw","bh","strokeRect","drawCoordinates","xRight","xLeft","yTop","yBottom","coordinatesX","coordinatesY","zIndexSorter","obj1","obj2","elem","objects","defaultConfig","window","devicePixelRatio","className","margin","layers","GridLayer","ShadowLayer","countX","countY","rightOffset","bottomOffset","min","resizeCallback","removeEventListener","offsetWidth","addEventListener","floor","boardWidth","boardHeight","layer","setWidth","setHeight","setDimensions","getViewport","setViewport","getSize","setSize","getCoordinates","setCoordinates","redrawScheduled","requestAnimationFrame","sort","object","handler","bind","addObject","TypeError","addObjectAt","removeObject","objectPos","splice","removeObjectsAt","obj","removeAllObjects","hasObject","registerBoardListener","evt","layerX","pos","getRelativeCoordinates","layerY","absoluteX","absoluteY","EventEmitter","JAPANESE_RULES","repeating","KO","allowRewrite","allowSuicide","komi","CHINESE_RULES","NONE","ING_RULES","NO_RULES","ALL","Japanese","GOE","NZ","AGA","Chinese","capCount","black","white","turn","BLACK","isOnPosition","get","set","EMPTY","clone","Position","slice","compare","diff","applyMove","prevColor","capturesAbove","captureIfNoLiberties","capturesRight","capturesBelow","capturesLeft","hasLiberties","capture","validatePosition","alreadyTested","createGrid","toString","output","toTwoDimensionalArray","arr","rules","positionStack","play","nextPosition","tryToPlay","pushPosition","hasPositionRepeated","depth","pass","isValid","isOnBoard","addStone","removeStone","setStone","getStone","popPosition","pop","read","str","write","NUMBER","parseFloat","TEXT","COLOR","WHITE","POINT","String","fromCharCode","LABEL","substr","VECTOR","propertyValueTypes","_default","transformer","multiple","notEmpty","MN","AB","AW","AE","PL","C","N","DM","GB","GW","HO","UC","V","BM","TE","DO","IT","TB","TW","AP","CA","FF","GM","ST","SZ","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","US","WR","WT","TM","HA","KM","BL","WL","OB","OW","PM","VW","PropIdent","processJSGF","gameTree","rootNode","KifuNode","setSGFProperties","lastNode","node","parent","propIdent","hasOwnProperty","getSGFProperty","innerSGF","reduce","prev","current","getPath","forks","unshift","removeChild","contains","some","child","insertBefore","newNode","referenceNode","replaceChild","newChild","oldChild","getProperty","setProperty","map","propValue","replace","setSGFProperty","propValues","propertyValueType","toSGF","fromJS","fromSGF","gameNo","SGFParser","register","player","registerEvent","event","propertyData","setPropertyData","beforeMove","game","PropertyHandler","afterMove","beforeInit","goRules","afterInit","BoardSizeHandler","RulesHandler","HandicapHandler","SetupHandler","SetTurnHandler","registerPropertyHandlers","basePropertyHandlers","loadKifu","currentNode","propertiesData","Map","executeRoot","newGame","rulesName","find","propertyHandlers","emitNodeLifeCycleEvent","Game","executeMove","executeNext","executePrevious","blackMove","BLACK_MOVE","whiteMove","WHITE_MOVE","getPropertyData","currentNodeData","data","getRootProperty","getNextNodes","next","previous","first","last","goTo","pathOrMoveNumber","j","previousFork","nextNode","boardMarkup","previousNode","beforeNextNode","beforePreviousNode","samePoint","p1","p2","ignore","field","propIdents","isThereMarkup","currentMoveBlackMark","currentMoveWhiteMark","BoardLineObject","BoardLabelObject","currentViewport","minX","minY","maxX","maxY","defaultPlainPlayerConfig","boardTheme","defaultBoardConfig","Circle","enableMouseWheel","enableKeys","plainPlayerPropertyHandlers","MarkupHandler","MarkupLabelHandler","MarkupLineHandler","MoveHandler","ViewportHandler","colorsMap","CanvasBoard","stoneBoardsObjects","updateStones","tabIndex","_mouseWheelEvent","e","activeElement","deltaY","_keyEvent","destroy","PlayerBase","executeRootNode","executeNode","BOARD_SIZE","RULES","handicap","HANDICAP","addBlack","ADD_BLACK","addWhite","ADD_WHITE","CLEAR_FIELD","SET_TURN","resetNode"],"mappings":"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","file":"static/js/11.33ba8173.chunk.js","sourcesContent":["import SGFParser from './SGFParser';\r\n\r\n/**\r\n * Class for syntax errors in SGF string.\r\n * @ extends Error\r\n */\r\nexport class SGFSyntaxError extends Error {\r\n  // tslint:disable-next-line:variable-name\r\n  __proto__: Error;\r\n\r\n  constructor(message: string, parser?: SGFParser) {\r\n    super(message);\r\n    this.__proto__ = new.target.prototype;\r\n\r\n    // var tempError = Error.apply(this);\r\n    this.name = this.name = 'SGFSyntaxError';\r\n    this.message = message || 'There was an unspecified syntax error in the SGF';\r\n\r\n    if (parser) {\r\n      this.message += ` on line ${parser.lineNo}, char ${parser.charNo}:\\n`;\r\n      this.message += `\\t${parser.sgfString.split('\\n')[parser.lineNo - 1]}\\n`;\r\n      this.message += `\\t${Array(parser.charNo + 1).join(' ')}^`;\r\n    }\r\n  }\r\n}\r\n\r\n// a small ES5 hack because currently in ES6 you can't extend Errors\r\n// SGFSyntaxError.prototype = Object.create(Error.prototype);\r\n// SGFSyntaxError.prototype.constructor = SGFSyntaxError;\r\n\r\nexport default SGFSyntaxError;\r\n","import SGFSyntaxError from './SGFSyntaxError';\r\nimport { PropIdent, SGFProperties, SGFCollection, SGFGameTree, SGFNode } from './sgfTypes';\r\n\r\n/**\r\n * Contains methods for parsing sgf string.\r\n * @module SGFParser\r\n */\r\n\r\nconst CODE_A = 'A'.charCodeAt(0);\r\nconst CODE_Z = 'Z'.charCodeAt(0);\r\nconst CODE_WHITE_CHAR = ' '.charCodeAt(0);\r\n\r\nfunction isCharUCLetter(char: string) {\r\n  if (!char) {\r\n    return false;\r\n  }\r\n\r\n  const charCode = char.charCodeAt(0);\r\n  return charCode >= CODE_A && charCode <= CODE_Z;\r\n}\r\n\r\n/**\r\n * Class for parsing of sgf files. Can be used for parsing of SGF fragments as well.\r\n */\r\n\r\nexport default class SGFParser {\r\n  /** SGF string to be parsed */\r\n  sgfString: string;\r\n\r\n  /** Current character position */\r\n  position: number = 0;\r\n\r\n  /** Current line number */\r\n  lineNo: number = 1;\r\n\r\n  /** Current char number (on the line) */\r\n  charNo: number = 0;\r\n\r\n  /**\r\n   * Creates new instance of SGF parser with SGF loaded ready to be parsed.\r\n   * @param sgf string to parse.\r\n   */\r\n  constructor(sgf: string) {\r\n    this.sgfString = sgf;\r\n  }\r\n\r\n  /**\r\n   * Returns current significant character (ignoring whitespace characters).\r\n   * If there is end of string, return undefined.\r\n   */\r\n  protected currentChar(): string {\r\n    while (this.sgfString.charCodeAt(this.position) <= CODE_WHITE_CHAR) {\r\n      // While the character is a whitespace, increase position pointer and line and column numbers.\r\n      this.nextChar();\r\n    }\r\n\r\n    return this.sgfString[this.position];\r\n  }\r\n\r\n  /**\r\n   * Move pointer to next character and return it (including whitespace).\r\n   */\r\n  protected nextChar() {\r\n    if (this.sgfString[this.position] === '\\n') {\r\n      this.charNo = 0;\r\n      this.lineNo++;\r\n    } else {\r\n      this.charNo++;\r\n    }\r\n    this.position++;\r\n\r\n    return this.sgfString[this.position];\r\n  }\r\n\r\n  /**\r\n   * Reads current significant character and if it isn't equal with the argument, throws an error.\r\n   * Then move pointer to next character.\r\n   */\r\n  protected processChar(char: string) {\r\n    if (this.currentChar() !== char) {\r\n      throw new SGFSyntaxError(`Unexpected character ${this.currentChar()}. Character ${char} was expected.`, this);\r\n    }\r\n\r\n    return this.nextChar();\r\n  }\r\n\r\n  /**\r\n   * Parse SGF property value - `\"[\" CValueType \"]\"`.\r\n   * @param optional\r\n   */\r\n  parsePropertyValue(optional?: boolean): string {\r\n    if (optional && this.currentChar() !== '[') {\r\n      return;\r\n    }\r\n\r\n    let value = '';\r\n\r\n    // process \"[\" and read first char\r\n    let char = this.processChar('[');\r\n\r\n    while (char !== ']') {\r\n      if (!char) {\r\n        // char mustn't be undefined\r\n        throw new SGFSyntaxError('End of SGF inside of property', this);\r\n      } else if (char === '\\\\') {\r\n        // if there is character '\\' save next character\r\n        char = this.nextChar();\r\n\r\n        if (!char) {\r\n          // char have to exist of course\r\n          throw new SGFSyntaxError('End of SGF inside of property', this);\r\n        } else if (char === '\\n') {\r\n          // ignore new line, otherwise save\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // save the character\r\n      value += char;\r\n\r\n      // and move to next one\r\n      char = this.nextChar();\r\n    }\r\n\r\n    this.processChar(']');\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Reads the property identifiers (One or more UC letters) - `UcLetter { UcLetter }`.\r\n   */\r\n  parsePropertyIdent(): PropIdent {\r\n    let ident = '';\r\n\r\n    // Read current significant character\r\n    let char = this.currentChar();\r\n\r\n    if (!isCharUCLetter(char)) {\r\n      throw new SGFSyntaxError('Property identifier must consists from upper case letters.', this);\r\n    }\r\n\r\n    ident += char;\r\n\r\n    while (char = this.nextChar()) {\r\n      if (!isCharUCLetter(char)) {\r\n        break;\r\n      }\r\n\r\n      ident += char;\r\n    }\r\n\r\n    return ident as PropIdent;\r\n  }\r\n\r\n  /**\r\n   * Parses sequence of property values - `PropValue { PropValue }`.\r\n   */\r\n  parsePropertyValues() {\r\n    const values: string[] = [];\r\n    let value = this.parsePropertyValue();\r\n\r\n    if (value) {\r\n      values.push(value);\r\n    }\r\n\r\n    while (value = this.parsePropertyValue(true)) {\r\n      values.push(value);\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Parses a SGF property - `PropIdent PropValue { PropValue }`.\r\n   */\r\n  parseProperty(): [PropIdent, string[]] {\r\n    if (!isCharUCLetter(this.currentChar())) {\r\n      return;\r\n    }\r\n\r\n    return [this.parsePropertyIdent(), this.parsePropertyValues()];\r\n  }\r\n\r\n  /**\r\n   * Parses a SGF node - `\";\" { Property }`.\r\n   */\r\n  parseNode(): SGFNode {\r\n    this.processChar(';');\r\n\r\n    const properties: SGFProperties = {};\r\n    let property: [PropIdent, string[]];\r\n\r\n    while (property = this.parseProperty()) {\r\n      properties[property[0]] = property[1];\r\n    }\r\n\r\n    return properties;\r\n  }\r\n\r\n  /**\r\n   * Parses a SGF Sequence - `Node { Node }`.\r\n   */\r\n  parseSequence(): SGFNode[] {\r\n    const sequence: SGFNode[] = [];\r\n\r\n    sequence.push(this.parseNode());\r\n\r\n    while (this.currentChar() === ';') {\r\n      sequence.push(this.parseNode());\r\n    }\r\n\r\n    return sequence;\r\n  }\r\n\r\n  /**\r\n   * Parses a SGF *GameTree* - `\"(\" Sequence { GameTree } \")\"`.\r\n   */\r\n  parseGameTree(): SGFGameTree {\r\n    this.processChar('(');\r\n\r\n    const sequence = this.parseSequence();\r\n    let children: SGFGameTree[] = [];\r\n\r\n    if (this.currentChar() === '(') {\r\n      children = this.parseCollection();\r\n    }\r\n\r\n    this.processChar(')');\r\n\r\n    return { sequence, children };\r\n  }\r\n\r\n  /**\r\n   * Parses a SGF *Collection* - `Collection = GameTree { GameTree }`. This is the main method for parsing SGF file.\r\n   */\r\n  parseCollection(): SGFCollection {\r\n    const gameTrees: SGFCollection = [];\r\n    gameTrees.push(this.parseGameTree());\r\n\r\n    while (this.currentChar() === '(') {\r\n      gameTrees.push(this.parseGameTree());\r\n    }\r\n\r\n    return gameTrees;\r\n  }\r\n}\r\n","/**\r\n * Enumeration representing stone color, can be used for representing board position.\r\n */\r\nexport enum Color {\r\n  BLACK = 1,\r\n  B = 1,\r\n  WHITE = -1,\r\n  W = -1,\r\n  EMPTY = 0,\r\n  E = 0,\r\n}\r\n\r\n/**\r\n * Simple 2 dimensional vector for referencing field on the board.\r\n */\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface Label extends Point {\r\n  text: string;\r\n}\r\n\r\nexport type Vector = Point[];\r\n\r\nexport interface Label extends Point {\r\n  text: string;\r\n}\r\n\r\nexport interface Field extends Point {\r\n  c: Color;\r\n}\r\n\r\nexport interface Move extends Point {\r\n  c: Color.BLACK | Color.WHITE;\r\n}\r\n","import { DrawHandler } from '../drawHandlers';\r\n\r\nexport default class BoardObject {\r\n  type: string | DrawHandler;\r\n  zIndex: number = 0;\r\n\r\n  constructor(type: string | DrawHandler) {\r\n    this.type = type;\r\n  }\r\n}\r\n","import BoardObject from './BoardObject';\r\nimport { DrawHandler } from '../drawHandlers';\r\n\r\nexport default class FieldObject extends BoardObject {\r\n  x: number;\r\n  y: number;\r\n  scaleX: number;\r\n  scaleY: number;\r\n  rotate: number;\r\n  opacity: number;\r\n\r\n  constructor(type: string | DrawHandler) {\r\n    super(type);\r\n\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.scaleX = 1;\r\n    this.scaleY = 1;\r\n    this.rotate = 0;\r\n  }\r\n\r\n  setPosition(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  setScale(factor: number) {\r\n    this.scaleX = factor;\r\n    this.scaleY = factor;\r\n  }\r\n\r\n  setOpacity(value: number) {\r\n    this.opacity = value;\r\n  }\r\n}\r\n","import { Color } from '../../types';\r\nimport FieldObject from './FieldObject';\r\nimport { DrawHandler } from '../drawHandlers';\r\n\r\n/**\r\n * Board markup object is special type of object, which can have 3 variations - for empty field\r\n * and for black and white stone.\r\n */\r\nexport default class BoardMarkupObject extends FieldObject {\r\n  variation: Color;\r\n\r\n  constructor(type: string | DrawHandler, variation: Color = Color.E) {\r\n    super(type);\r\n    this.variation = variation;\r\n  }\r\n}\r\n","import { Color } from '../../types';\r\nimport BoardMarkupObject from './BoardMarkupObject';\r\n\r\nexport default class BoardLabelObject extends BoardMarkupObject {\r\n  text: string;\r\n\r\n  constructor(text: string, variation?: Color) {\r\n    super('LB', variation);\r\n\r\n    this.text = text;\r\n  }\r\n}\r\n","import { Point } from '../../types';\r\nimport FieldObject from './FieldObject';\r\nimport { DrawHandler } from '../drawHandlers';\r\n\r\n/**\r\n * Board markup object is special type of object, which can have 3 variations - for empty field\r\n * and for black and white stone.\r\n */\r\nexport default class BoardLineObject extends FieldObject {\r\n  start: Point;\r\n  end: Point;\r\n\r\n  constructor(type: string | DrawHandler, start: Point, end: Point) {\r\n    super(type);\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n","/* global document, window */\r\nimport CanvasBoard from './CanvasBoard';\r\nimport { BoardObject, FieldObject } from './boardObjects';\r\nimport { DrawFunction } from './types';\r\n\r\n/**\r\n * @class\r\n * Implements one layer of the HTML5 canvas\r\n */\r\n\r\nexport default class CanvasLayer {\r\n  element: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n  pixelRatio: number;\r\n  board: CanvasBoard;\r\n\r\n  constructor(board: CanvasBoard) {\r\n    this.board = board;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.element = document.createElement('canvas');\r\n    this.element.style.position = 'absolute';\r\n    // this.element.style.zIndex = weight.toString(10);\r\n    this.element.style.width = '100%';\r\n    this.element.style.height = '100%';\r\n\r\n    this.context = this.element.getContext('2d');\r\n    this.context.scale(this.board.pixelRatio, this.board.pixelRatio);\r\n    this.context.save();\r\n\r\n    this.board.boardElement.appendChild(this.element);\r\n  }\r\n\r\n  resize(width: number, height: number) {\r\n    const linesShift = this.board.config.theme.linesShift;\r\n\r\n    this.element.width = width;\r\n    this.element.height = height;\r\n\r\n    this.context.transform(1, 0, 0, 1, linesShift, linesShift);\r\n  }\r\n\r\n  draw(drawFunction: DrawFunction, boardObject: BoardObject) {\r\n    try {\r\n      // create a \"sandbox\" for drawing function\r\n      this.context.save();\r\n\r\n      if (boardObject instanceof FieldObject) {\r\n        const leftOffset = this.board.getX(boardObject.x);\r\n        const topOffset = this.board.getY(boardObject.y);\r\n        const fieldSize = this.board.fieldSize;\r\n\r\n        this.context.transform(\r\n          fieldSize * boardObject.scaleX,\r\n          0, 0,\r\n          fieldSize * boardObject.scaleY,\r\n          leftOffset,\r\n          topOffset,\r\n        );\r\n        this.context.rotate(boardObject.rotate);\r\n        this.context.globalAlpha = boardObject.opacity;\r\n      } else {\r\n        const leftOffset = this.board.getX(0);\r\n        const topOffset = this.board.getY(0);\r\n        const fieldSize = this.board.fieldSize;\r\n\r\n        this.context.transform(\r\n          fieldSize,\r\n          0, 0,\r\n          fieldSize,\r\n          leftOffset,\r\n          topOffset,\r\n        );\r\n      }\r\n\r\n      const res = drawFunction(this.context, this.board.config, boardObject);\r\n\r\n      // restore context\r\n      this.context.restore();\r\n\r\n      if (res && res.then) {\r\n        res.then(() => {\r\n          this.board.redraw();\r\n        });\r\n      }\r\n    } catch (err) {\r\n      // If the board is too small some canvas painting function can throw an exception, but we don't\r\n      // want to break our app\r\n      // tslint:disable-next-line:no-console\r\n      console.error(`Object couldn't be rendered. Error: ${err.message}`, boardObject);\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.context.clearRect(0, 0, this.element.width, this.element.height);\r\n  }\r\n}\r\n","import CanvasLayer from './CanvasLayer';\r\n\r\n/**\r\n * @class\r\n * @extends WGo.CanvasBoard.CanvasLayer\r\n * Layer for shadows. It is slightly translated.\r\n */\r\n\r\nexport default class ShadowLayer extends CanvasLayer {\r\n  resize(width: number, height: number) {\r\n    super.resize(width, height);\r\n    this.context.transform(\r\n      1,\r\n      0,\r\n      0,\r\n      1,\r\n      this.board.config.theme.shadowOffsetX * this.board.fieldSize,\r\n      this.board.config.theme.shadowOffsetY * this.board.fieldSize,\r\n    );\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport { BoardObject } from '../boardObjects';\r\n\r\nexport default abstract class DrawHandler<P extends object = {}> {\r\n  params: P;\r\n\r\n  constructor(params: P = {} as any) {\r\n    this.params = params;\r\n  }\r\n\r\n  stone?(context: CanvasRenderingContext2D, config: CanvasBoardConfig, boardObject: BoardObject): void;\r\n  shadow?(context: CanvasRenderingContext2D, config: CanvasBoardConfig, boardObject: BoardObject): void;\r\n  grid?(context: CanvasRenderingContext2D, config: CanvasBoardConfig, boardObject: BoardObject): void;\r\n}\r\n","import DrawHandler from './DrawHandler';\r\nimport { CanvasBoardConfig } from '../types';\r\nimport { BoardObject } from '../boardObjects';\r\n\r\n/**\r\n * Provides shadow for the stone.\r\n */\r\nexport default class Stone extends DrawHandler {\r\n  shadow(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    const blur = boardConfig.theme.shadowBlur;\r\n\r\n    const startRadius = Math.max(stoneRadius - stoneRadius * blur, 0.00001);\r\n    const stopRadius = stoneRadius + (1 / 7 * stoneRadius) * blur;\r\n\r\n    const gradient = canvasCtx.createRadialGradient(0, 0, startRadius, 0, 0, stopRadius);\r\n    gradient.addColorStop(0, boardConfig.theme.shadowColor);\r\n    gradient.addColorStop(1, boardConfig.theme.shadowTransparentColor);\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = gradient;\r\n    canvasCtx.arc(0, 0, stopRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport Stone from './Stone';\r\n\r\nexport default class ShellStoneBlack extends Stone {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = '#000';\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    let radGrad = canvasCtx.createRadialGradient(\r\n      0.4 * stoneRadius,\r\n      0.4 * stoneRadius,\r\n      0,\r\n      0.5 * stoneRadius,\r\n      0.5 * stoneRadius,\r\n      stoneRadius,\r\n    );\r\n    radGrad.addColorStop(0, 'rgba(32,32,32,1)');\r\n    radGrad.addColorStop(1, 'rgba(0,0,0,0)');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(\r\n      0,\r\n      0,\r\n      stoneRadius,\r\n      0,\r\n      2 * Math.PI,\r\n      true,\r\n    );\r\n    canvasCtx.fill();\r\n\r\n    radGrad = canvasCtx.createRadialGradient(\r\n      -0.4 * stoneRadius,\r\n      -0.4 * stoneRadius,\r\n      0.05 * stoneRadius,\r\n      -0.5 * stoneRadius,\r\n      -0.5 * stoneRadius,\r\n      1.5 * stoneRadius,\r\n    );\r\n    radGrad.addColorStop(0, 'rgba(64,64,64,1)');\r\n    radGrad.addColorStop(1, 'rgba(0,0,0,0)');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(\r\n      0,\r\n      0,\r\n      stoneRadius,\r\n      0,\r\n      2 * Math.PI,\r\n      true,\r\n    );\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport Stone from './Stone';\r\nimport { FieldObject } from '../boardObjects';\r\n\r\n// shell stone helping functions\r\nconst shellSeed = Math.ceil(Math.random() * 9999999);\r\n\r\nexport default class ShellStoneWhite extends Stone {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: FieldObject) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = '#aaa';\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    // do shell magic here\r\n    const type = shellSeed % (3 + boardObject.x * boardConfig.size + boardObject.y) % 3;\r\n    const z = boardConfig.size * boardConfig.size + boardObject.x * boardConfig.size + boardObject.y;\r\n    const angle = (2 / z) * (shellSeed % z);\r\n\r\n    if (type === 0) {\r\n      this.drawShell({\r\n        ctx: canvasCtx,\r\n        x: 0,\r\n        y: 0,\r\n        radius: stoneRadius,\r\n        angle,\r\n        lines: [0.10, 0.12, 0.11, 0.10, 0.09, 0.09, 0.09, 0.09],\r\n        factor: 0.25,\r\n        thickness: 1.75,\r\n      });\r\n    } else if (type === 1) {\r\n      this.drawShell({\r\n        ctx: canvasCtx,\r\n        x: 0,\r\n        y: 0,\r\n        radius: stoneRadius,\r\n        angle,\r\n        lines: [0.10, 0.09, 0.08, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06],\r\n        factor: 0.2,\r\n        thickness: 1.5,\r\n      });\r\n    } else {\r\n      this.drawShell({\r\n        ctx: canvasCtx,\r\n        x: 0,\r\n        y: 0,\r\n        radius: stoneRadius,\r\n        angle,\r\n        lines: [0.12, 0.14, 0.13, 0.12, 0.12, 0.12],\r\n        factor: 0.3,\r\n        thickness: 2,\r\n      });\r\n    }\r\n\r\n    const radGrad = canvasCtx.createRadialGradient(\r\n      -2 * stoneRadius / 5,\r\n      -2 * stoneRadius / 5,\r\n      stoneRadius / 3,\r\n      -stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      5 * stoneRadius / 5,\r\n    );\r\n    radGrad.addColorStop(0, 'rgba(255,255,255,0.9)');\r\n    radGrad.addColorStop(1, 'rgba(255,255,255,0)');\r\n\r\n    // add radial gradient //\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n  }\r\n\r\n  drawShell(arg: any) {\r\n    let fromAngle = arg.angle;\r\n    let toAngle = arg.angle;\r\n\r\n    for (let i = 0; i < arg.lines.length; i++) {\r\n      fromAngle += arg.lines[i];\r\n      toAngle -= arg.lines[i];\r\n      this.drawShellLine(arg.ctx, arg.x, arg.y, arg.radius, fromAngle, toAngle, arg.factor, arg.thickness);\r\n    }\r\n  }\r\n\r\n  drawShellLine(\r\n    ctx: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    r: number,\r\n    startAngle: number,\r\n    endAngle: number,\r\n    factor: number,\r\n    thickness: number,\r\n  ) {\r\n    ctx.strokeStyle = 'rgba(64,64,64,0.2)';\r\n\r\n    ctx.lineWidth = (r / 30) * thickness;\r\n    ctx.beginPath();\r\n\r\n    const radius = r * 0.9;\r\n\r\n    const x1 = x + radius * Math.cos(startAngle * Math.PI);\r\n    const y1 = y + radius * Math.sin(startAngle * Math.PI);\r\n    const x2 = x + radius * Math.cos(endAngle * Math.PI);\r\n    const y2 = y + radius * Math.sin(endAngle * Math.PI);\r\n\r\n    let m;\r\n    let angle;\r\n    let diffX;\r\n    let diffY;\r\n\r\n    if (x2 > x1) {\r\n      m = (y2 - y1) / (x2 - x1);\r\n      angle = Math.atan(m);\r\n    } else if (x2 === x1) {\r\n      angle = Math.PI / 2;\r\n    } else {\r\n      m = (y2 - y1) / (x2 - x1);\r\n      angle = Math.atan(m) - Math.PI;\r\n    }\r\n\r\n    const c = factor * radius;\r\n    diffX = Math.sin(angle) * c;\r\n    diffY = Math.cos(angle) * c;\r\n\r\n    const bx1 = x1 + diffX;\r\n    const by1 = y1 - diffY;\r\n\r\n    const bx2 = x2 + diffX;\r\n    const by2 = y2 - diffY;\r\n\r\n    ctx.moveTo(x1, y1);\r\n    ctx.bezierCurveTo(bx1, by1, bx2, by2, x2, y2);\r\n    ctx.stroke();\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport Stone from './Stone';\r\n\r\nexport default class GlassStoneBlack extends Stone {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    const radGrad = canvasCtx.createRadialGradient(\r\n      -2 * stoneRadius / 5,\r\n      -2 * stoneRadius / 5,\r\n      1,\r\n      -stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      4 * stoneRadius / 5,\r\n    );\r\n    radGrad.addColorStop(0, '#666');\r\n    radGrad.addColorStop(1, '#000');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import Stone from './Stone';\r\nimport { CanvasBoardConfig } from '../types';\r\n\r\nexport default class GlassStoneWhite extends Stone {\r\n  stone (canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    const radGrad = canvasCtx.createRadialGradient(\r\n      -2 * stoneRadius / 5,\r\n      -2 * stoneRadius / 5,\r\n      stoneRadius / 3,\r\n      -stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      5 * stoneRadius / 5,\r\n    );\r\n\r\n    radGrad.addColorStop(0, '#fff');\r\n    radGrad.addColorStop(1, '#aaa');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport Stone from './Stone';\r\n\r\nexport default class PaintedStoneBlack extends Stone {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    const radGrad = canvasCtx.createRadialGradient(\r\n      -2 * stoneRadius / 5,\r\n      -2 * stoneRadius / 5,\r\n      1 * stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      4 * stoneRadius / 5,\r\n    );\r\n    radGrad.addColorStop(0, '#111');\r\n    radGrad.addColorStop(1, '#000');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.lineWidth = stoneRadius / 6;\r\n\r\n    canvasCtx.strokeStyle = '#ccc';\r\n    canvasCtx.arc(-stoneRadius / 8, -stoneRadius / 8, stoneRadius / 2, Math.PI, 1.5 * Math.PI);\r\n\r\n    canvasCtx.stroke();\r\n  }\r\n}\r\n","import Stone from './Stone';\r\nimport { CanvasBoardConfig } from '../types';\r\n\r\nexport default class PaintedStoneWhite extends Stone {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneRadius = boardConfig.theme.stoneSize;\r\n    const radGrad = canvasCtx.createRadialGradient(\r\n      -2 * stoneRadius / 5,\r\n      -2 * stoneRadius / 5,\r\n      2 * stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      -stoneRadius / 5,\r\n      4 * stoneRadius / 5,\r\n    );\r\n    radGrad.addColorStop(0, '#fff');\r\n    radGrad.addColorStop(1, '#ddd');\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.fillStyle = radGrad;\r\n    canvasCtx.arc(0, 0, stoneRadius, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.lineWidth = stoneRadius / 6;\r\n\r\n    canvasCtx.strokeStyle = '#999';\r\n    canvasCtx.arc(stoneRadius / 8, stoneRadius / 8, stoneRadius / 2, 0, Math.PI / 2, false);\r\n\r\n    canvasCtx.stroke();\r\n  }\r\n}\r\n","// Black and white stone\r\nimport { CanvasBoardConfig } from '../types';\r\nimport DrawHandler from './DrawHandler';\r\n\r\nexport default class SimpleStone extends DrawHandler<{ color: string }> {\r\n  constructor (color: string) {\r\n    super({ color });\r\n  }\r\n\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig) {\r\n    const stoneSize = boardConfig.theme.stoneSize;\r\n    const lw = boardConfig.theme.markupLineWidth;\r\n\r\n    canvasCtx.fillStyle = this.params.color;\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.arc(0, 0, stoneSize - lw / 2, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    canvasCtx.lineWidth = lw;\r\n    canvasCtx.strokeStyle = 'black';\r\n    canvasCtx.stroke();\r\n  }\r\n}\r\n","/* global window */\r\nimport { CanvasBoardConfig } from '../types';\r\nimport { FieldObject } from '../boardObjects';\r\nimport DrawHandler from './DrawHandler';\r\nimport Stone from './Stone';\r\n\r\n// Check if image has been loaded properly\r\n// see https://stereochro.me/ideas/detecting-broken-images-js\r\n/*function isOkay(img: any) {\r\n  if (typeof img === 'string') { return false; }\r\n  if (!img.complete) { return false; }\r\n  if (typeof img.naturalWidth !== 'undefined' && img.naturalWidth === 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n}*/\r\n\r\nexport default class RealisticStone extends Stone {\r\n  paths: string[];\r\n  images: { [path: string]: HTMLImageElement };\r\n  fallback: DrawHandler;\r\n  randSeed: number;\r\n  redrawRequest: number;\r\n\r\n  constructor (paths: string[], fallback: DrawHandler) {\r\n    super();\r\n    this.fallback = fallback;\r\n    this.randSeed = Math.ceil(Math.random() * 9999999);\r\n    this.images = {};\r\n    this.paths = paths;\r\n  }\r\n\r\n  loadImage(path: string): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.onload = () => {\r\n        resolve(image);\r\n      };\r\n      image.onerror = () => {\r\n        reject();\r\n      };\r\n      image.src = path;\r\n    });\r\n  }\r\n\r\n  stone (canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: FieldObject) {\r\n    const count = this.paths.length;\r\n\r\n    if (count) {\r\n      const stoneRadius = boardConfig.theme.stoneSize;\r\n      const idx = this.randSeed % (count + boardObject.x * boardConfig.size + boardObject.y) % count;\r\n\r\n      if (this.images[this.paths[idx]]) {\r\n        canvasCtx.drawImage(this.images[this.paths[idx]], -stoneRadius, -stoneRadius, 2 * stoneRadius, 2 * stoneRadius);\r\n      } else {\r\n        this.fallback.stone(canvasCtx, boardConfig, boardObject);\r\n\r\n        const path = this.paths[idx];\r\n        return this.loadImage(path).then((image) => {\r\n          this.images[path] = image;\r\n        }).catch(() => {\r\n          this.paths = this.paths.filter(p => p !== path);\r\n        });\r\n      }\r\n    } else {\r\n      this.fallback.stone(canvasCtx, boardConfig, boardObject);\r\n    }\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport DrawHandler from './DrawHandler';\r\nimport { Color } from '../../types';\r\nimport { BoardMarkupObject } from '../boardObjects';\r\n\r\ninterface MarkupDrawHandlerParams {\r\n  color?: string;\r\n  lineWidth?: number;\r\n  fillColor?: string;\r\n}\r\n\r\nexport default abstract class MarkupDrawHandler<P = {}> extends DrawHandler<MarkupDrawHandlerParams & P> {\r\n  grid(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: BoardMarkupObject) {\r\n    if (boardObject.variation === Color.E) {\r\n      canvasCtx.clearRect(\r\n        -boardConfig.theme.stoneSize,\r\n        -boardConfig.theme.stoneSize,\r\n        boardConfig.theme.stoneSize * 2,\r\n        boardConfig.theme.stoneSize * 2,\r\n      );\r\n    }\r\n  }\r\n\r\n  getColor(boardConfig: CanvasBoardConfig, boardObject: BoardMarkupObject) {\r\n    if (this.params.color) {\r\n      return this.params.color;\r\n    }\r\n\r\n    if (boardObject.variation === Color.B) {\r\n      return boardConfig.theme.markupBlackColor;\r\n    }\r\n\r\n    if (boardObject.variation === Color.W) {\r\n      return boardConfig.theme.markupWhiteColor;\r\n    }\r\n\r\n    return boardConfig.theme.markupNoneColor;\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport { BoardMarkupObject } from '../boardObjects';\r\nimport MarkupDrawHandler from './MarkupDrawHandler';\r\n\r\nexport default abstract class ShapeMarkup extends MarkupDrawHandler {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: BoardMarkupObject) {\r\n    canvasCtx.strokeStyle = this.getColor(boardConfig, boardObject);\r\n    canvasCtx.lineWidth = this.params.lineWidth || boardConfig.theme.markupLineWidth;\r\n    canvasCtx.shadowBlur = 10;\r\n    canvasCtx.shadowColor = canvasCtx.strokeStyle;\r\n\r\n    canvasCtx.beginPath();\r\n    this.drawShape(canvasCtx);\r\n    canvasCtx.stroke();\r\n\r\n    if (this.params.fillColor) {\r\n      canvasCtx.fillStyle = this.params.fillColor;\r\n      canvasCtx.fill();\r\n    }\r\n  }\r\n\r\n  abstract drawShape(canvasCtx: CanvasRenderingContext2D): void;\r\n}\r\n","import ShapeMarkup from './ShapeMarkup';\r\n\r\nexport default class Circle extends ShapeMarkup {\r\n  drawShape(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.arc(0, 0, 0.25, 0, 2 * Math.PI, true);\r\n  }\r\n}\r\n","import ShapeMarkup from './ShapeMarkup';\r\n\r\nexport default class Square extends ShapeMarkup {\r\n  drawShape(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.rect(-0.25, -0.25, 0.5, 0.5);\r\n  }\r\n}\r\n","import ShapeMarkup from './ShapeMarkup';\r\n\r\nexport default class Triangle extends ShapeMarkup {\r\n  drawShape(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.moveTo(0, 0 - 0.25);\r\n    canvasCtx.lineTo(-0.25, 0.166666);\r\n    canvasCtx.lineTo(0.25, 0.166666);\r\n    canvasCtx.closePath();\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport { Color } from '../../types';\r\nimport BoardLabelObject from '../boardObjects/BoardLabelObject';\r\nimport MarkupDrawHandler from './MarkupDrawHandler';\r\n\r\ninterface LabelParams {\r\n  font?: string;\r\n}\r\n\r\nexport default class Label extends MarkupDrawHandler<LabelParams> {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: BoardLabelObject) {\r\n    const font = this.params.font || boardConfig.theme.font || '';\r\n\r\n    canvasCtx.fillStyle = this.getColor(boardConfig, boardObject);\r\n    canvasCtx.shadowBlur = 10;\r\n    canvasCtx.shadowColor = canvasCtx.fillStyle;\r\n\r\n    let fontSize = 0.5;\r\n\r\n    if (boardObject.text.length === 1) {\r\n      fontSize = 0.75;\r\n    } else if (boardObject.text.length === 2) {\r\n      fontSize = 0.6;\r\n    }\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.textBaseline = 'middle';\r\n    canvasCtx.textAlign = 'center';\r\n    canvasCtx.font = `${fontSize}px ${font}`;\r\n    canvasCtx.fillText(boardObject.text, 0, 0.02 + (fontSize - 0.5) * 0.08, 1);\r\n  }\r\n}\r\n","import { CanvasBoardConfig } from '../types';\r\nimport DrawHandler from './DrawHandler';\r\nimport { BoardMarkupObject } from '../boardObjects';\r\n\r\n/**\r\n * TODO: rename this\r\n */\r\nexport default class Dot extends DrawHandler<{ color: string }> {\r\n  stone(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.fillStyle = this.params.color;\r\n    canvasCtx.shadowBlur = 10;\r\n    canvasCtx.shadowColor = canvasCtx.fillStyle;\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.arc(0, 0, 0.15, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import ShapeMarkup from './ShapeMarkup';\r\n\r\nexport default class XMark extends ShapeMarkup {\r\n  drawShape(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.moveTo(-0.20, -0.20);\r\n    canvasCtx.lineTo(0.20, 0.20);\r\n    canvasCtx.moveTo(0.20, -0.20);\r\n    canvasCtx.lineTo(-0.20, 0.20);\r\n  }\r\n}\r\n","import DrawHandler from './DrawHandler';\r\nimport { CanvasBoardConfig } from '../types';\r\nimport { BoardLineObject } from '../boardObjects';\r\n\r\ninterface LineParams {\r\n  color?: string;\r\n  lineWidth?: number;\r\n}\r\n\r\nexport default class Line extends DrawHandler<LineParams> {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: BoardLineObject) {\r\n    canvasCtx.strokeStyle = this.params.color ? this.params.color : boardConfig.theme.markupNoneColor;\r\n    canvasCtx.lineWidth = this.params.lineWidth || boardConfig.theme.markupLineWidth;\r\n    canvasCtx.shadowBlur = 10;\r\n    canvasCtx.shadowColor = canvasCtx.strokeStyle;\r\n\r\n    canvasCtx.beginPath();\r\n    canvasCtx.moveTo(boardObject.start.x, boardObject.start.y);\r\n    canvasCtx.lineTo(boardObject.end.x, boardObject.end.y);\r\n    canvasCtx.stroke();\r\n  }\r\n}\r\n","import DrawHandler from './DrawHandler';\r\nimport { CanvasBoardConfig } from '../types';\r\nimport { BoardLineObject } from '../boardObjects';\r\n\r\ninterface ArrowParams {\r\n  color?: string;\r\n  lineWidth?: number;\r\n}\r\n\r\nexport default class Arrow extends DrawHandler<ArrowParams> {\r\n  stone(canvasCtx: CanvasRenderingContext2D, boardConfig: CanvasBoardConfig, boardObject: BoardLineObject) {\r\n    canvasCtx.strokeStyle = this.params.color ? this.params.color : boardConfig.theme.markupNoneColor;\r\n    canvasCtx.fillStyle = canvasCtx.strokeStyle;\r\n    canvasCtx.lineWidth = this.params.lineWidth || boardConfig.theme.markupLineWidth;\r\n    canvasCtx.shadowBlur = 10;\r\n    canvasCtx.shadowColor = canvasCtx.strokeStyle;\r\n\r\n    const x1 = boardObject.start.x;\r\n    const y1 = boardObject.start.y;\r\n    const x2 = boardObject.end.x;\r\n    const y2 = boardObject.end.y;\r\n\r\n    // length of the main line\r\n    const length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n\r\n    // line parametric functions\r\n    const getLineX = (t: number) => x1 + t * (x2 - x1);\r\n    const getLineY = (t: number) => y1 + t * (y2 - y1);\r\n\r\n    // triangle base line position on the main line\r\n    const triangleLen = 1 / length / 2.5;\r\n    const tx = getLineX(1 - triangleLen);\r\n    const ty = getLineY(1 - triangleLen);\r\n\r\n    // triangle base line parametric functions\r\n    const getBaseLineX = (t: number) => tx + t * (y2 - y1);\r\n    const getBaseLineY = (t: number) => ty + t * (x1 - x2);\r\n\r\n    // initial circle length\r\n    const circleLen = 0.1;\r\n\r\n    // draw initial circle\r\n    canvasCtx.beginPath();\r\n    canvasCtx.arc(x1, y1, circleLen, 0, 2 * Math.PI, true);\r\n    canvasCtx.fill();\r\n\r\n    // draw line\r\n    canvasCtx.beginPath();\r\n    canvasCtx.moveTo(getLineX(1 / length * circleLen), getLineY(1 / length * circleLen));\r\n    canvasCtx.lineTo(tx, ty);\r\n    canvasCtx.stroke();\r\n\r\n    // draw triangle at the end to make arrow\r\n    canvasCtx.beginPath();\r\n    canvasCtx.moveTo(getBaseLineX(- triangleLen / 1.75), getBaseLineY(- triangleLen / 1.75));\r\n    canvasCtx.lineTo(getBaseLineX(triangleLen / 1.75), getBaseLineY(triangleLen / 1.75));\r\n    canvasCtx.lineTo(x2, y2);\r\n    canvasCtx.closePath();\r\n    canvasCtx.fill();\r\n  }\r\n}\r\n","import DrawHandler from './DrawHandler';\r\n\r\nexport default class Dim extends DrawHandler<{ color: string }> {\r\n  stone(canvasCtx: CanvasRenderingContext2D) {\r\n    canvasCtx.fillStyle = this.params.color;\r\n    canvasCtx.fillRect(-0.5, -0.5, 1, 1);\r\n  }\r\n}\r\n","import { CanvasBoardTheme } from '../types';\r\nimport * as drawHandlers from '../drawHandlers';\r\n\r\nconst baseTheme: CanvasBoardTheme = {\r\n  // basic\r\n  stoneSize: 0.47,\r\n\r\n  // markup\r\n  markupBlackColor: 'rgba(255,255,255,0.9)',\r\n  markupWhiteColor: 'rgba(0,0,0,0.7)',\r\n  markupNoneColor: 'rgba(0,0,0,0.7)',\r\n  markupLineWidth: 0.05,\r\n\r\n  // shadows\r\n  shadowColor: 'rgba(62,32,32,0.5)',\r\n  shadowTransparentColor: 'rgba(62,32,32,0)',\r\n  shadowBlur: 0.25,\r\n  shadowOffsetX: 0.07,\r\n  shadowOffsetY: 0.13,\r\n\r\n  // other\r\n  font: 'calibri',\r\n  linesShift: -0.5,\r\n  backgroundColor: '#CEB053',\r\n  backgroundImage: '',\r\n\r\n  // grid\r\n  grid: {\r\n    linesWidth: 0.03,\r\n    linesColor: '#654525',\r\n    starColor: '#531',\r\n    starSize: 0.07,\r\n  },\r\n\r\n  // coordinates\r\n  coordinates: {\r\n    color: '#531',\r\n    bold: false,\r\n    x: 'ABCDEFGHJKLMNOPQRSTUVWXYZ',\r\n    y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\r\n  },\r\n\r\n  drawHandlers: {\r\n    B: new drawHandlers.SimpleStone('#222'),\r\n    W: new drawHandlers.SimpleStone('#eee'),\r\n    CR: new drawHandlers.Circle(),\r\n    SQ: new drawHandlers.Square(),\r\n    LB: new drawHandlers.Label(),\r\n    TR: new drawHandlers.Triangle(),\r\n    MA: new drawHandlers.XMark({ lineWidth: 0.075 }),\r\n    SL: new drawHandlers.Dot({ color: 'rgba(32, 32, 192, 0.75)' }),\r\n    LN: new drawHandlers.Line(),\r\n    AR: new drawHandlers.Arrow(),\r\n    DD: new drawHandlers.Dim({ color: 'rgba(0, 0, 0, 0.5)' }),\r\n  },\r\n};\r\n\r\nexport default baseTheme;\r\n","import * as drawHandlers from '../drawHandlers';\r\nimport { CanvasBoardTheme } from '../types';\r\nimport baseTheme from './baseTheme';\r\n\r\nconst realisticTheme: CanvasBoardTheme = {\r\n  ...baseTheme,\r\n  font: 'calibri',\r\n  backgroundImage: 'images/wood1.jpg',\r\n  stoneSize: 0.48,\r\n  drawHandlers: {\r\n    ...baseTheme.drawHandlers,\r\n    B: new drawHandlers.RealisticStone([\r\n      'images/stones/black00_128.png',\r\n      'images/stones/black01_128.png',\r\n      'images/stones/black02_128.png',\r\n      'images/stones/black03_128.png',\r\n    ], new drawHandlers.GlassStoneBlack()),\r\n    W: new drawHandlers.RealisticStone([\r\n      'images/stones/white00_128.png',\r\n      'images/stones/white01_128.png',\r\n      'images/stones/white02_128.png',\r\n      'images/stones/white03_128.png',\r\n      'images/stones/white04_128.png',\r\n      'images/stones/white05_128.png',\r\n      'images/stones/white06_128.png',\r\n      'images/stones/white07_128.png',\r\n      'images/stones/white08_128.png',\r\n      'images/stones/white09_128.png',\r\n      'images/stones/white10_128.png',\r\n    ], new drawHandlers.GlassStoneWhite()),\r\n  },\r\n};\r\n\r\nexport default realisticTheme;\r\n","import * as drawHandlers from '../drawHandlers';\r\nimport { CanvasBoardTheme } from '../types';\r\nimport baseTheme from './baseTheme';\r\n\r\nconst modernTheme: CanvasBoardTheme = {\r\n  ...baseTheme,\r\n  font: 'calibri',\r\n  backgroundImage: '',\r\n\r\n  drawHandlers: {\r\n    ...baseTheme.drawHandlers,\r\n    B: new drawHandlers.ShellStoneBlack(),\r\n    W: new drawHandlers.ShellStoneWhite(),\r\n  },\r\n};\r\n\r\nexport default modernTheme;\r\n","import { baseTheme } from './themes';\r\nimport { CanvasBoardConfig } from './types';\r\n\r\nconst canvasBoardDefaultConfig: CanvasBoardConfig = {\r\n  size: 19,\r\n  width: 0,\r\n  height: 0,\r\n  starPoints: {\r\n    5: [{ x: 2, y: 2 }],\r\n    7: [{ x: 3, y: 3 }],\r\n    8: [{ x: 2, y: 2 }, { x: 5, y: 2 }, { x: 2, y: 5 }, { x: 5, y: 5 }],\r\n    9: [{ x: 2, y: 2 }, { x: 6, y: 2 }, { x: 4, y: 4 }, { x: 2, y: 6 }, { x: 6, y: 6 }],\r\n    10: [{ x: 2, y: 2 }, { x: 7, y: 2 }, { x: 2, y: 7 }, { x: 7, y: 7 }],\r\n    11: [{ x: 2, y: 2 }, { x: 8, y: 2 }, { x: 5, y: 5 }, { x: 2, y: 8 }, { x: 8, y: 8 }],\r\n    12: [{ x: 3, y: 3 }, { x: 8, y: 3 }, { x: 3, y: 8 }, { x: 8, y: 8 }],\r\n    13: [{ x: 3, y: 3 }, { x: 9, y: 3 }, { x: 6, y: 6 }, { x: 3, y: 9 }, { x: 9, y: 9 }],\r\n    14: [{ x: 3, y: 3 }, { x: 10, y: 3 }, { x: 3, y: 10 }, { x: 10, y: 10 }],\r\n    15: [{ x: 3, y: 3 }, { x: 11, y: 3 }, { x: 7, y: 7 }, { x: 3, y: 11 }, { x: 11, y: 11 }],\r\n    16: [{ x: 3, y: 3 }, { x: 12, y: 3 }, { x: 3, y: 12 }, { x: 12, y: 12 }],\r\n    17: [{ x: 3, y: 3 }, { x: 8, y: 3 }, { x: 13, y: 3 }, { x: 3, y: 8 }, { x: 8, y: 8 },\r\n    { x: 13, y: 8 }, { x: 3, y: 13 }, { x: 8, y: 13 }, { x: 13, y: 13 }],\r\n    18: [{ x: 3, y: 3 }, { x: 14, y: 3 }, { x: 3, y: 14 }, { x: 14, y: 14 }],\r\n    19: [{ x: 3, y: 3 }, { x: 9, y: 3 }, { x: 15, y: 3 }, { x: 3, y: 9 }, { x: 9, y: 9 },\r\n    { x: 15, y: 9 }, { x: 3, y: 15 }, { x: 9, y: 15 }, { x: 15, y: 15 }],\r\n    20: [{ x: 3, y: 3 }, { x: 16, y: 3 }, { x: 3, y: 16 }, { x: 16, y: 16 }],\r\n    21: [{ x: 3, y: 3 }, { x: 10, y: 3 }, { x: 17, y: 3 }, { x: 3, y: 10 }, { x: 10, y: 10 },\r\n    { x: 17, y: 10 }, { x: 3, y: 17 }, { x: 10, y: 17 }, { x: 17, y: 17 }],\r\n  },\r\n  viewport: {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n  },\r\n  coordinates: false,\r\n  theme: baseTheme,\r\n  marginSize: 0.25,\r\n  snapToGrid: false,\r\n};\r\n\r\nexport default canvasBoardDefaultConfig;\r\n","export type PartialRecursive<T> = {\r\n  [P in keyof T]?: T[P] | PartialRecursive<T[P]>;\r\n};\r\n\r\n/**\r\n * Helper function for merging default config with provided config.\r\n *\r\n * @param defaults\r\n * @param config\r\n */\r\nexport default function makeConfig<T>(defaults: T, config: PartialRecursive<T>): T {\r\n  const mergedConfig: any = {};\r\n  const defaultKeys = Object.keys(defaults);\r\n  defaultKeys.forEach((key) => {\r\n    const val = (config as any)[key];\r\n    const defVal = (defaults as any)[key];\r\n\r\n    if (val != null && val.constructor === Object && !Array.isArray(val) && defVal != null) {\r\n      mergedConfig[key] = makeConfig(defVal, val);\r\n    } else if (val !== undefined) {\r\n      mergedConfig[key] = val;\r\n    } else {\r\n      mergedConfig[key] = defVal;\r\n    }\r\n  });\r\n\r\n  Object.keys(config).forEach((key) => {\r\n    if (defaultKeys.indexOf(key) === -1) {\r\n      mergedConfig[key] = (config as any)[key];\r\n    }\r\n  });\r\n\r\n  return mergedConfig;\r\n}\r\n","/**\r\n * Simple base class for event handling. It tries to follow Node.js EventEmitter class API,\r\n * but contains only basic methods.\r\n */\r\nexport default class EventEmitter {\r\n  // tslint:disable-next-line:variable-name\r\n  private _events: {[eventName: string]: Function[]} = {};\r\n\r\n  on(evName: string, callback: Function) {\r\n    this._events[evName] = this._events[evName] || [];\r\n    this._events[evName].push(callback);\r\n  }\r\n\r\n  off(evName: string, callback: Function) {\r\n    if (this._events[evName]) {\r\n      if (callback == null) {\r\n        this._events[evName] = [];\r\n      }\r\n      this._events[evName] = this._events[evName].filter(fn => fn !== callback);\r\n    }\r\n  }\r\n\r\n  emit(evName: string, ...args: any[]) {\r\n    if (this._events[evName]) {\r\n      this._events[evName].forEach(fn => fn(...args));\r\n    }\r\n  }\r\n}\r\n","/**\r\n * WGo's game engine offers to set 3 rules:\r\n *\r\n * - *checkRepeat* - one of `repeat.KO`, `repeat.ALL`, `repeat.NONE` - defines if or when a move can be repeated.\r\n * - *allowRewrite* - if set true a move can rewrite existing move (for uncommon applications)\r\n * - *allowSuicide* - if set true a suicide will be allowed (and stone will be immediately captured)\r\n *\r\n * In this module there are some common preset rule sets (Japanese, Chinese etc...).\r\n * Extend object `gameRules` if you wish to add some rule set. Names of the rules should correspond with\r\n * SGF `RU` property.\r\n */\r\n\r\nexport enum Repeating {\r\n  KO = 'KO',\r\n  ALL = 'ALL',\r\n  NONE = 'NONE',\r\n}\r\n\r\nexport interface GoRules {\r\n  repeating: Repeating;\r\n  allowRewrite: boolean;\r\n  allowSuicide: boolean;\r\n  komi: number;\r\n}\r\n\r\nexport const JAPANESE_RULES: GoRules = {\r\n  repeating: Repeating.KO,\r\n  allowRewrite: false,\r\n  allowSuicide: false,\r\n  komi: 6.5,\r\n};\r\n\r\nexport const CHINESE_RULES: GoRules = {\r\n  repeating: Repeating.NONE,\r\n  allowRewrite: false,\r\n  allowSuicide: false,\r\n  komi: 7.5,\r\n};\r\n\r\nexport const ING_RULES: GoRules = {\r\n  repeating: Repeating.NONE,\r\n  allowRewrite: false,\r\n  allowSuicide: true,\r\n  komi: 7.5,\r\n};\r\n\r\nexport const NO_RULES: GoRules = {\r\n  repeating: Repeating.ALL,\r\n  allowRewrite: true,\r\n  allowSuicide: true,\r\n  komi: 0,\r\n};\r\n\r\nexport default {\r\n  Japanese: JAPANESE_RULES,\r\n  GOE: ING_RULES,\r\n  NZ: ING_RULES,\r\n  AGA: CHINESE_RULES,\r\n  Chinese: CHINESE_RULES,\r\n};\r\n","import CanvasLayer from './CanvasLayer';\r\n\r\nexport default class GridLayer extends CanvasLayer {\r\n  init() {\r\n    super.init();\r\n    this.drawGrid();\r\n  }\r\n\r\n  clear() {\r\n    super.clear();\r\n    this.drawGrid();\r\n  }\r\n\r\n  drawGrid() {\r\n    // draw grid\r\n    let tmp;\r\n    const params = this.board.config.theme.grid;\r\n\r\n    this.context.beginPath();\r\n    this.context.lineWidth = params.linesWidth * this.board.fieldSize;\r\n    this.context.strokeStyle = params.linesColor;\r\n\r\n    const tx = Math.round(this.board.getX(0));\r\n    const ty = Math.round(this.board.getY(0));\r\n    const bw = Math.round((this.board.config.size - 1) * this.board.fieldSize);\r\n    const bh = Math.round((this.board.config.size - 1) * this.board.fieldSize);\r\n\r\n    this.context.strokeRect(tx, ty, bw, bh);\r\n\r\n    for (let i = 1; i < this.board.config.size - 1; i++) {\r\n      tmp = Math.round(this.board.getX(i));\r\n      this.context.moveTo(tmp, ty);\r\n      this.context.lineTo(tmp, ty + bh);\r\n\r\n      tmp = Math.round(this.board.getY(i));\r\n      this.context.moveTo(tx, tmp);\r\n      this.context.lineTo(tx + bw, tmp);\r\n    }\r\n\r\n    this.context.stroke();\r\n\r\n    // draw stars\r\n    this.context.fillStyle = params.starColor;\r\n\r\n    if (this.board.config.starPoints[this.board.config.size]) {\r\n      for (const key in this.board.config.starPoints[this.board.config.size]) {\r\n        this.context.beginPath();\r\n        this.context.arc(\r\n          this.board.getX(this.board.config.starPoints[this.board.config.size][key].x),\r\n          this.board.getY(this.board.config.starPoints[this.board.config.size][key].y),\r\n          params.starSize * this.board.fieldSize, 0, 2 * Math.PI, true,\r\n        );\r\n        this.context.fill();\r\n      }\r\n    }\r\n\r\n    if (this.board.config.coordinates) {\r\n      this.drawCoordinates();\r\n    }\r\n  }\r\n\r\n  drawCoordinates() {\r\n    let t;\r\n    const params = this.board.config.theme.coordinates;\r\n\r\n    this.context.fillStyle = params.color;\r\n    this.context.textBaseline = 'middle';\r\n    this.context.textAlign = 'center';\r\n    // tslint:disable-next-line:max-line-length\r\n    this.context.font = `${params.bold ? 'bold ' : ''}${this.board.fieldSize / 2}px ${this.board.config.theme.font || ''}`;\r\n\r\n    const xRight = this.board.getX(-0.75);\r\n    const xLeft = this.board.getX(this.board.config.size - 0.25);\r\n    const yTop = this.board.getY(-0.75);\r\n    const yBottom = this.board.getY(this.board.config.size - 0.25);\r\n\r\n    const coordinatesX = params.x;\r\n    const coordinatesY = params.y;\r\n\r\n    for (let i = 0; i < this.board.config.size; i++) {\r\n      t = this.board.getY(i);\r\n      this.context.fillText(coordinatesX[i] as string, xRight, t);\r\n      this.context.fillText(coordinatesX[i] as string, xLeft, t);\r\n\r\n      t = this.board.getX(i);\r\n      this.context.fillText(coordinatesY[i] as string, t, yTop);\r\n      this.context.fillText(coordinatesY[i] as string, t, yBottom);\r\n    }\r\n\r\n    this.context.fillStyle = 'black';\r\n  }\r\n}\r\n","/* global document, window */\r\n\r\n/**\r\n * Contains implementation of go board.\r\n * @module CanvasBoard\r\n */\r\n\r\nimport ShadowLayer from './ShadowLayer';\r\nimport CanvasLayer from './CanvasLayer';\r\nimport defaultConfig from './defaultConfig';\r\nimport {\r\n  CanvasBoardConfig,\r\n  BoardViewport,\r\n} from './types';\r\nimport makeConfig, { PartialRecursive } from '../utils/makeConfig';\r\nimport EventEmitter from '../utils/EventEmitter';\r\nimport { Point } from '../types';\r\nimport { BoardObject, FieldObject } from './boardObjects';\r\nimport GridLayer from './GridLayer';\r\nimport DrawHandler from './drawHandlers/DrawHandler';\r\n\r\nconst zIndexSorter = (obj1: BoardObject, obj2: BoardObject) => obj1.zIndex - obj2.zIndex;\r\n\r\nexport default class CanvasBoard extends EventEmitter {\r\n  config: CanvasBoardConfig;\r\n  element: HTMLElement;\r\n  boardElement: HTMLElement;\r\n  pixelRatio: number;\r\n  objects: BoardObject[] = [];\r\n  layers: {\r\n    grid: CanvasLayer;\r\n    shadow: CanvasLayer;\r\n    stone: CanvasLayer;\r\n    [key: string]: CanvasLayer;\r\n  };\r\n\r\n  // following props are computed in resize() method for performance\r\n  width: number;\r\n  height: number;\r\n  leftOffset: number;\r\n  topOffset: number;\r\n  fieldSize: number;\r\n  resizeCallback: (this: Window, ev: UIEvent) => any;\r\n  redrawScheduled: boolean;\r\n\r\n  /**\r\n\t * CanvasBoard class constructor - it creates a canvas board.\r\n\t *\r\n\t * @alias WGo.CanvasBoard\r\n\t * @class\r\n\t * @param {HTMLElement} elem DOM element to put in\r\n\t * @param {Object} config Configuration object. It is object with \"key: value\" structure. Possible configurations are:\r\n\t *\r\n\t * * size: number - size of the board (default: 19)\r\n\t * * width: number - width of the board (default: 0)\r\n\t * * height: number - height of the board (default: 0)\r\n\t * * font: string - font of board writings (!deprecated)\r\n\t * * lineWidth: number - line width of board drawings (!deprecated)\r\n\t * * autoLineWidth: boolean - if set true, line width will be automatically computed accordingly to board size - this\r\n   *   option rewrites 'lineWidth' /and it will keep markups sharp/ (!deprecated)\r\n\t * * starPoints: Object - star points coordinates, defined for various board sizes. Look at CanvasBoard.default for\r\n   *   more info.\r\n\t * * stoneHandler: CanvasBoard.DrawHandler - stone drawing handler (default: CanvasBoard.drawHandlers.SHELL)\r\n\t * * starSize: number - size of star points (default: 1). Radius of stars is dynamic, however you can modify it by\r\n   *   given constant. (!deprecated)\r\n\t * * stoneSize: number - size of stone (default: 1). Radius of stone is dynamic, however you can modify it by given\r\n   *   constant. (!deprecated)\r\n\t * * shadowSize: number - size of stone shadow (default: 1). Radius of shadow is dynamic, however you can modify it by\r\n   *   given constant. (!deprecated)\r\n\t * * background: string - background of the board, it can be either color (#RRGGBB) or url. Empty string means no\r\n   *   background. (default: WGo.DIR+\"wood1.jpg\")\r\n\t * * section: {\r\n\t *     top: number,\r\n\t *     right: number,\r\n\t *     bottom: number,\r\n\t *     left: number\r\n\t *   }\r\n\t *   It defines a section of board to be displayed. You can set a number of rows(or cols) to be skipped on each side.\r\n\t *   Numbers can be negative, in that case there will be more empty space. In default all values are zeros.\r\n\t * * theme: Object - theme object, which defines all graphical attributes of the board. Default theme object\r\n   *   is \"WGo.CanvasBoard.themes.default\". For old look you may use \"WGo.CanvasBoard.themes.old\".\r\n\t *\r\n\t * Note: properties lineWidth, autoLineWidth, starPoints, starSize, stoneSize and shadowSize will be considered only\r\n   * if you set property 'theme' to 'WGo.CanvasBoard.themes.old'.\r\n\t */\r\n\r\n  constructor(elem: HTMLElement, config: PartialRecursive<CanvasBoardConfig> = {}) {\r\n    super();\r\n\r\n    // merge user config with default\r\n    this.config = makeConfig(defaultConfig, config);\r\n\r\n    // init board html\r\n    this.init(elem);\r\n\r\n    // set the pixel ratio for HDPI (e.g. Retina) screens\r\n    this.pixelRatio = window.devicePixelRatio || 1;\r\n\r\n    this.resize();\r\n  }\r\n\r\n  /**\r\n   * Initialization method, it is called in constructor. You shouldn't call it, but you can alter it.\r\n   */\r\n\r\n  private init(elem: HTMLElement) {\r\n    this.element = document.createElement('div');\r\n    this.element.className = 'wgo-board';\r\n    this.element.style.position = 'relative';\r\n    elem.appendChild(this.element);\r\n\r\n    this.boardElement = document.createElement('div');\r\n    this.boardElement.style.position = 'absolute';\r\n    this.boardElement.style.left = '0';\r\n    this.boardElement.style.top = '0';\r\n    this.boardElement.style.right = '0';\r\n    this.boardElement.style.bottom = '0';\r\n    this.boardElement.style.margin = 'auto';\r\n    this.element.appendChild(this.boardElement);\r\n\r\n    this.layers = {\r\n      grid: new GridLayer(this),\r\n      shadow: new ShadowLayer(this),\r\n      stone: new CanvasLayer(this),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions and redraws everything\r\n   */\r\n  resize() {\r\n    const countX = this.config.size - this.config.viewport.left - this.config.viewport.right;\r\n    const countY = this.config.size - this.config.viewport.top - this.config.viewport.bottom;\r\n    const topOffset = this.config.marginSize + (this.config.coordinates && !this.config.viewport.top ? 0.5 : 0);\r\n    const rightOffset = this.config.marginSize + (this.config.coordinates && !this.config.viewport.right ? 0.5 : 0);\r\n    const bottomOffset = this.config.marginSize + (this.config.coordinates && !this.config.viewport.bottom ? 0.5 : 0);\r\n    const leftOffset = this.config.marginSize + (this.config.coordinates && !this.config.viewport.left ? 0.5 : 0);\r\n\r\n    if (this.config.width && this.config.height) {\r\n      // exact dimensions\r\n      this.width = this.config.width * this.pixelRatio;\r\n      this.height = this.config.height * this.pixelRatio;\r\n      this.fieldSize = Math.min(\r\n        this.width / (countX + leftOffset + rightOffset),\r\n        this.height / (countY + topOffset + bottomOffset),\r\n      );\r\n\r\n      if (this.resizeCallback) {\r\n        window.removeEventListener('resize', this.resizeCallback);\r\n      }\r\n    } else if (this.config.width) {\r\n      this.width = this.config.width * this.pixelRatio;\r\n      this.fieldSize = this.width / (countX + leftOffset + rightOffset);\r\n      this.height = this.fieldSize * (countY + topOffset + bottomOffset);\r\n\r\n      if (this.resizeCallback) {\r\n        window.removeEventListener('resize', this.resizeCallback);\r\n      }\r\n    } else if (this.config.height) {\r\n      this.height = this.config.height * this.pixelRatio;\r\n      this.fieldSize = this.height / (countY + topOffset + bottomOffset);\r\n      this.width = this.fieldSize * (countX + leftOffset + rightOffset);\r\n\r\n      if (this.resizeCallback) {\r\n        window.removeEventListener('resize', this.resizeCallback);\r\n      }\r\n    } else {\r\n      this.element.style.width = 'auto';\r\n      this.width = this.element.offsetWidth * this.pixelRatio;\r\n      this.fieldSize = this.width / (countX + leftOffset + rightOffset);\r\n      this.height = this.fieldSize * (countY + topOffset + bottomOffset);\r\n\r\n      if (!this.resizeCallback) {\r\n        this.resizeCallback = () => {\r\n          this.resize();\r\n        };\r\n        window.addEventListener('resize', this.resizeCallback);\r\n      }\r\n    }\r\n\r\n    if (this.config.snapToGrid) {\r\n      this.fieldSize = Math.floor(this.fieldSize);\r\n    }\r\n\r\n    this.leftOffset = this.fieldSize * (leftOffset + 0.5 - this.config.viewport.left);\r\n    this.topOffset = this.fieldSize * (topOffset + 0.5 - this.config.viewport.top);\r\n\r\n    this.element.style.width = `${(this.width / this.pixelRatio)}px`;\r\n    this.element.style.height = `${(this.height / this.pixelRatio)}px`;\r\n\r\n    const boardWidth = (countX + leftOffset + rightOffset) * this.fieldSize;\r\n    const boardHeight = (countY + topOffset + bottomOffset) * this.fieldSize;\r\n\r\n    this.boardElement.style.width = `${(boardWidth / this.pixelRatio)}px`;\r\n    this.boardElement.style.height = `${(boardHeight / this.pixelRatio)}px`;\r\n\r\n    Object.keys(this.layers).forEach((layer) => {\r\n      this.layers[layer].resize(boardWidth, boardHeight);\r\n    });\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  /**\r\n\t * Get absolute X coordinate\r\n\t *\r\n\t * @param {number} x relative coordinate\r\n\t */\r\n\r\n  getX(x: number) {\r\n    return this.leftOffset + x * this.fieldSize;\r\n  }\r\n\r\n  /**\r\n\t * Get absolute Y coordinate\r\n\t *\r\n\t * @param {number} y relative coordinate\r\n\t */\r\n\r\n  getY(y: number) {\r\n    return this.topOffset + y * this.fieldSize;\r\n  }\r\n\r\n  /**\r\n   * Sets width of the board, height will be automatically computed. Then everything will be redrawn.\r\n   *\r\n   * @param width\r\n   */\r\n  setWidth(width: number) {\r\n    this.config.width = width;\r\n    this.config.height = 0;\r\n    this.resize();\r\n  }\r\n\r\n  /**\r\n   * Sets height of the board, width will be automatically computed. Then everything will be redrawn.\r\n   *\r\n   * @param height\r\n   */\r\n  setHeight(height: number) {\r\n    this.config.width = 0;\r\n    this.config.height = height;\r\n    this.resize();\r\n  }\r\n\r\n  /**\r\n   * Sets exact dimensions of the board. Then everything will be redrawn.\r\n   *\r\n   * @param width\r\n   * @param height\r\n   */\r\n  setDimensions(width: number, height: number) {\r\n    this.config.width = width;\r\n    this.config.height = height;\r\n    this.resize();\r\n  }\r\n\r\n  /**\r\n\t * Get currently visible section of the board\r\n\t */\r\n\r\n  getViewport() {\r\n    return this.config.viewport;\r\n  }\r\n\r\n  /**\r\n\t * Set section of the board to be displayed\r\n\t */\r\n\r\n  setViewport(viewport: BoardViewport) {\r\n    this.config.viewport = viewport;\r\n    this.resize();\r\n  }\r\n\r\n  getSize() {\r\n    return this.config.size;\r\n  }\r\n\r\n  setSize(size: number = 19) {\r\n    if (size !== this.config.size) {\r\n      this.config.size = size;\r\n      this.resize();\r\n    }\r\n  }\r\n\r\n  getCoordinates() {\r\n    return this.config.coordinates;\r\n  }\r\n\r\n  setCoordinates(coordinates: boolean) {\r\n    if (this.config.coordinates !== coordinates) {\r\n      this.config.coordinates = coordinates;\r\n      this.resize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Redraw everything.\r\n   */\r\n  redraw() {\r\n    if (!this.redrawScheduled) {\r\n      this.redrawScheduled = true;\r\n\r\n      window.requestAnimationFrame(() => {\r\n        this.redrawScheduled = false;\r\n\r\n        // set correct background\r\n        this.boardElement.style.backgroundColor = this.config.theme.backgroundColor;\r\n\r\n        if (this.config.theme.backgroundImage) {\r\n          this.boardElement.style.backgroundImage = `url(\"${this.config.theme.backgroundImage}\")`;\r\n        }\r\n\r\n        // sort objects by zIndex\r\n        this.objects.sort(zIndexSorter);\r\n\r\n        // redraw all layers\r\n        Object.keys(this.layers).forEach((layer) => {\r\n          this.layers[layer].clear();\r\n\r\n          this.objects.forEach((object) => {\r\n            const handler = typeof object.type === 'string' ? this.config.theme.drawHandlers[object.type] : object.type;\r\n            if ((handler as any)[layer]) {\r\n              this.layers[layer].draw((handler as any)[layer].bind(handler), object);\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add board object. Main function for adding graphics on the board.\r\n   *\r\n   * @param boardObject\r\n   */\r\n  addObject(boardObject: BoardObject | BoardObject[]) {\r\n    // handling multiple objects\r\n    if (Array.isArray(boardObject)) {\r\n      for (let i = 0; i < boardObject.length; i++) {\r\n        this.addObject(boardObject[i]);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (typeof boardObject.type === 'string') {\r\n      if (!this.config.theme.drawHandlers[boardObject.type]) {\r\n        throw new TypeError(`Board object type \"${boardObject.type}\" doesn't exist in \\`config.theme.drawHandlers\\`.`);\r\n      }\r\n    } else {\r\n      if (boardObject.type == null || !(boardObject.type instanceof DrawHandler)) {\r\n        throw new TypeError('Invalid board object type.');\r\n      }\r\n    }\r\n\r\n    this.objects.push(boardObject);\r\n    this.redraw();\r\n  }\r\n\r\n  /**\r\n   * Shortcut method to add object and set its position.\r\n   */\r\n  addObjectAt(x: number, y: number, boardObject: FieldObject) {\r\n    boardObject.setPosition(x, y);\r\n    this.addObject(boardObject);\r\n  }\r\n\r\n  /**\r\n   * Remove board object. Main function for removing graphics on the board.\r\n   *\r\n   * @param boardObject\r\n   */\r\n  removeObject(boardObject: BoardObject | BoardObject[]) {\r\n    // handling multiple objects\r\n    if (Array.isArray(boardObject)) {\r\n      for (let i = 0; i < boardObject.length; i++) {\r\n        this.removeObject(boardObject[i]);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const objectPos = this.objects.indexOf(boardObject);\r\n\r\n    if (objectPos === -1) {\r\n      // object isn't on the board, ignore it\r\n      return;\r\n    }\r\n\r\n    this.objects.splice(objectPos, 1);\r\n    this.redraw();\r\n  }\r\n\r\n  removeObjectsAt(x: number, y: number) {\r\n    this.objects.forEach((obj) => {\r\n      if (obj instanceof FieldObject && obj.x === x && obj.y === y) {\r\n        this.removeObject(obj);\r\n      }\r\n    });\r\n  }\r\n\r\n  removeAllObjects() {\r\n    this.objects = [];\r\n    this.redraw();\r\n  }\r\n\r\n  hasObject(boardObject: BoardObject) {\r\n    return this.objects.indexOf(boardObject) >= 0;\r\n  }\r\n\r\n  on(type: string, callback: (event: UIEvent, point: Point) => void) {\r\n    super.on(type, callback);\r\n    this.registerBoardListener(type);\r\n  }\r\n\r\n  registerBoardListener(type: string) {\r\n    this.boardElement.addEventListener(type, (evt) => {\r\n      if ((evt as any).layerX != null) {\r\n        const pos = this.getRelativeCoordinates((evt as any).layerX, (evt as any).layerY);\r\n        this.emit(type, evt, pos);\r\n      } else {\r\n        this.emit(type, evt);\r\n      }\r\n    });\r\n  }\r\n\r\n  getRelativeCoordinates(absoluteX: number, absoluteY: number) {\r\n    // new hopefully better translation of coordinates\r\n\r\n    const x = Math.round((absoluteX * this.pixelRatio - this.leftOffset) / this.fieldSize);\r\n    const y = Math.round((absoluteY * this.pixelRatio - this.topOffset) / this.fieldSize);\r\n\r\n    if (x < 0 || x >= this.config.size || y < 0 || y >= this.config.size) {\r\n      return null;\r\n    }\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  /*\r\n  off(type, callback) {\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      const listener = this.listeners[i];\r\n      if (listener.type === type && listener.callback === callback) {\r\n        this.element.removeEventListener(listener.type, listener, true);\r\n        this.listeners.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }*/\r\n}\r\n","/**\r\n * Contains implementation of go position class.\r\n * @module Position\r\n */\r\n\r\nimport { Color, Field } from '../types';\r\n\r\n// creates 2-dim array\r\nfunction createGrid<T>(size: number) {\r\n  const grid: T[][] = [];\r\n  for (let i = 0; i < size; i++) {\r\n    grid.push([]);\r\n  }\r\n  return grid;\r\n}\r\n\r\n/**\r\n * Position class represents a state of the go game in one moment in time. It is composed from a grid containing black\r\n * and white stones, capture counts, and actual turn. It is designed to be mutable.\r\n */\r\nexport default class Position {\r\n  /**\r\n\t * Size of the board.\r\n\t * @constant\r\n\t */\r\n\r\n  size: number;\r\n\r\n  /**\r\n   * One dimensional array containing stones of the position.\r\n   */\r\n  grid: Color[] = [];\r\n\r\n  /**\r\n   * Contains numbers of stones that both players captured.\r\n   *\r\n   * @property {number} black - Count of white stones captured by **black**.\r\n   * @property {number} white - Count of black stones captured by **white**.\r\n   */\r\n\r\n  capCount = {\r\n    black: 0,\r\n    white: 0,\r\n  };\r\n\r\n  /**\r\n   * Who plays next move.\r\n   */\r\n\r\n  turn: Color.BLACK | Color.WHITE = Color.BLACK;\r\n\r\n  /**\r\n   * Creates instance of position object.\r\n   *\r\n   * @alias WGo.Position\r\n   * @class\r\n   *\r\n   * @param {number} [size = 19] - Size of the board.\r\n   */\r\n  constructor(size: number = 19) {\r\n    this.size = size;\r\n\r\n    // init grid\r\n    this.clear();\r\n  }\r\n\r\n  isOnPosition(x: number, y: number) {\r\n    return x >= 0 && y >= 0 && x < this.size && y < this.size;\r\n  }\r\n\r\n  /**\r\n   * Returns stone on the given field.\r\n   *\r\n   * @param {number} x - X coordinate\r\n   * @param {number} y - Y coordinate\r\n   * @return {Color} Color\r\n   */\r\n  get(x: number, y: number): Color {\r\n    if (!this.isOnPosition(x, y)) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.grid[x * this.size + y];\r\n  }\r\n\r\n  /**\r\n   * Sets stone on the given field.\r\n   *\r\n   * @param {number} x - X coordinate\r\n   * @param {number} y - Y coordinate\r\n   * @param {Color} c - Color\r\n   */\r\n  set(x: number, y: number, c: Color) {\r\n    if (!this.isOnPosition(x, y)) {\r\n      throw new TypeError('Attempt to set field outside of position.');\r\n    }\r\n\r\n    this.grid[x * this.size + y] = c;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the whole position (every value is set to EMPTY).\r\n   */\r\n  clear() {\r\n    for (let i = 0; i < this.size * this.size; i++) {\r\n      this.grid[i] = Color.EMPTY;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clones the whole position.\r\n   *\r\n   * @return {WGo.Position} Copy of the position.\r\n   * @todo Clone turn as well.\r\n   */\r\n\r\n  clone(): Position {\r\n    const clone = new Position(this.size);\r\n    clone.grid = this.grid.slice(0);\r\n    clone.capCount.black = this.capCount.black;\r\n    clone.capCount.white = this.capCount.white;\r\n    clone.turn = this.turn;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Compares this position with another position and return object with changes\r\n   *\r\n   * @param {WGo.Position} position - Position to compare to.\r\n   * @return {Field[]} Array of different fields\r\n   */\r\n\r\n  compare(position: Position): Field[] {\r\n    if (position.size !== this.size) {\r\n      throw new TypeError('Positions of different sizes cannot be compared.');\r\n    }\r\n\r\n    const diff: Field[] = [];\r\n\r\n    for (let i = 0; i < this.size * this.size; i++) {\r\n      if (this.grid[i] !== position.grid[i]) {\r\n        diff.push({\r\n          x: Math.floor(i / this.size),\r\n          y: i % this.size,\r\n          c: position.grid[i],\r\n        });\r\n      }\r\n    }\r\n\r\n    return diff;\r\n  }\r\n\r\n  /**\r\n   * Sets stone on given coordinates and capture adjacent stones without liberties if there are any.\r\n   * If move is invalid, false is returned.\r\n   */\r\n  applyMove(x: number, y: number, c: Color = this.turn, allowSuicide = false, allowRewrite = false) {\r\n    // check if move is on empty field of the board\r\n    if (!(allowRewrite || this.get(x, y) === Color.EMPTY)) {\r\n      return false;\r\n    }\r\n\r\n    // clone position and add a stone\r\n    const prevColor = this.get(x, y);\r\n    this.set(x, y, c);\r\n\r\n    // check capturing of all surrounding stones\r\n    const capturesAbove = this.get(x, y - 1) === -c && this.captureIfNoLiberties(x, y - 1);\r\n    const capturesRight = this.get(x + 1, y) === -c && this.captureIfNoLiberties(x + 1, y);\r\n    const capturesBelow = this.get(x, y + 1) === -c && this.captureIfNoLiberties(x, y + 1);\r\n    const capturesLeft = this.get(x - 1, y) === -c && this.captureIfNoLiberties(x - 1, y);\r\n    const hasCaptured = capturesAbove || capturesRight || capturesBelow || capturesLeft;\r\n\r\n    // check suicide\r\n    if (!hasCaptured) {\r\n      if (!this.hasLiberties(x, y)) {\r\n        if (allowSuicide) {\r\n          this.capture(x, y, c);\r\n        } else {\r\n          // revert position\r\n          this.set(x, y, prevColor);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.turn = -c;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Validate position. Position is tested from 0:0 to size:size, if there are some moves,\r\n   * that should be captured, they will be removed. Returns a new Position object.\r\n   * This position isn't modified.\r\n   */\r\n\r\n  validatePosition() {\r\n    for (let x = 0; x < this.size; x++) {\r\n      for (let y = 0; y < this.size; y++) {\r\n        this.captureIfNoLiberties(x - 1, y);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns true if stone or group on the given coordinates has at least one liberty.\r\n   */\r\n  hasLiberties(x: number, y: number, alreadyTested = createGrid(this.size), c = this.get(x, y)): boolean {\r\n    // out of the board there aren't liberties\r\n    if (!this.isOnPosition(x, y)) {\r\n      return false;\r\n    }\r\n\r\n    // however empty field means liberty\r\n    if (this.get(x, y) === Color.EMPTY) {\r\n      return true;\r\n    }\r\n\r\n    // already tested field or stone of enemy isn't a liberty.\r\n    if (alreadyTested[x][y] || this.get(x, y) === -c) {\r\n      return false;\r\n    }\r\n\r\n    // set this field as tested\r\n    alreadyTested[x][y] = true;\r\n\r\n    // in this case we are checking our stone, if we get 4 false, it has no liberty\r\n    return (\r\n      this.hasLiberties(x, y - 1, alreadyTested, c) ||\r\n      this.hasLiberties(x, y + 1, alreadyTested, c) ||\r\n      this.hasLiberties(x - 1, y, alreadyTested, c) ||\r\n      this.hasLiberties(x + 1, y, alreadyTested, c)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if specified stone/group has zero liberties and if so it captures/removes stones from the position.\r\n   */\r\n  protected captureIfNoLiberties(x: number, y: number) {\r\n    // if it has zero liberties capture it\r\n    if (!this.hasLiberties(x, y)) {\r\n      // capture stones from game\r\n      this.capture(x, y);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Captures/removes stone on specified position and all adjacent and connected stones. This method ignores liberties.\r\n   */\r\n  capture(x: number, y: number, c: Color = this.get(x, y)) {\r\n    if (this.isOnPosition(x, y) && c !== Color.EMPTY && this.get(x, y) === c) {\r\n      this.set(x, y, Color.EMPTY);\r\n\r\n      if (c === Color.BLACK) {\r\n        this.capCount.white = this.capCount.white + 1;\r\n      } else {\r\n        this.capCount.black = this.capCount.black + 1;\r\n      }\r\n\r\n      this.capture(x, y - 1, c);\r\n      this.capture(x, y + 1, c);\r\n      this.capture(x - 1, y, c);\r\n      this.capture(x + 1, y, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For debug purposes.\r\n   */\r\n  toString() {\r\n    const TL = '┌';\r\n    const TM = '┬';\r\n    const TR = '┐';\r\n    const ML = '├';\r\n    const MM = '┼';\r\n    const MR = '┤';\r\n    const BL = '└';\r\n    const BM = '┴';\r\n    const BR = '┘';\r\n    const BS = '●';\r\n    const WS = '○';\r\n    const HF = '─'; // horizontal fill\r\n\r\n    let output = '   ';\r\n\r\n    for (let i = 0; i < this.size; i++) {\r\n      output += i < 9 ? `${i} ` : i;\r\n    }\r\n\r\n    output += '\\n';\r\n\r\n    for (let y = 0; y < this.size; y++) {\r\n      for (let x = 0; x < this.size; x++) {\r\n        const color = this.grid[x * this.size + y];\r\n\r\n        if (x === 0) {\r\n          output += `${(y < 10 ? ` ${y}` : y)} `;\r\n        }\r\n\r\n        if (color !== Color.EMPTY) {\r\n          output += color === Color.BLACK ? BS : WS;\r\n        } else {\r\n          let char;\r\n\r\n          if (y === 0) {\r\n            // top line\r\n            if (x === 0) {\r\n              char = TL;\r\n            } else if (x < this.size - 1) {\r\n              char = TM;\r\n            } else {\r\n              char = TR;\r\n            }\r\n          } else if (y < this.size - 1) {\r\n            // middle line\r\n            if (x === 0) {\r\n              char = ML;\r\n            } else if (x < this.size - 1) {\r\n              char = MM;\r\n            } else {\r\n              char = MR;\r\n            }\r\n          } else {\r\n            // bottom line\r\n            if (x === 0) {\r\n              char = BL;\r\n            } else if (x < this.size - 1) {\r\n              char = BM;\r\n            } else {\r\n              char = BR;\r\n            }\r\n          }\r\n\r\n          output += char;\r\n        }\r\n\r\n        if (x === this.size - 1) {\r\n          if (y !== this.size - 1) {\r\n            output += '\\n';\r\n          }\r\n        } else {\r\n          output += HF;\r\n        }\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Returns position grid as two dimensional array.\r\n   */\r\n  toTwoDimensionalArray() {\r\n    const arr: Color[][] = [];\r\n\r\n    for (let x = 0; x < this.size; x++) {\r\n      arr[x] = [];\r\n      for (let y = 0; y < this.size; y++) {\r\n        arr[x][y] = this.grid[x * this.size + y];\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}\r\n\r\n// import { Color, Field, Move } from '../types';\r\n\r\n// /**\r\n//  * Position of the board (grid) is represented as 2 dimensional array of colors.\r\n//  */\r\n// export type Position = Color[][];\r\n\r\n// /**\r\n//  * Creates empty position (filled with Color.EMPTY) of specified size.\r\n//  * @param size\r\n//  */\r\n// export function createPosition(size: number) {\r\n//   const position: Color[][] = [];\r\n//   for (let i = 0; i < size; i++) {\r\n//     const row: Color[] = [];\r\n//     for (let j = 0; j < size; j++) {\r\n//       row.push(Color.EMPTY);\r\n//     }\r\n//     position.push(row);\r\n//   }\r\n//   return position;\r\n// }\r\n\r\n// /**\r\n//  * Deep clones a position.\r\n//  * @param position\r\n//  */\r\n// export function clonePosition(position: Position) {\r\n//   return position.map(row => row.slice(0));\r\n// }\r\n\r\n// /**\r\n//  * Compares position `pos1` with position `pos2` and returns all differences on `pos2`.\r\n//  * @param pos1\r\n//  * @param pos2\r\n//  */\r\n// export function comparePositions(pos1: Position, pos2: Position): Field[] {\r\n//   if (pos1.length !== pos2.length) {\r\n//     throw new TypeError('Positions of different sizes cannot be compared.');\r\n//   }\r\n\r\n//   const diff: Field[] = [];\r\n\r\n//   for (let x = 0; x < pos1.length; x++) {\r\n//     for (let y = 0; y < pos2.length; y++) {\r\n//       if (pos1[x][y] !== pos2[x][y]) {\r\n//         diff.push({ x, y, c: pos2[x][y] });\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return diff;\r\n// }\r\n\r\n// function isOnBoard(position: Position, x: number, y: number) {\r\n//   return x >= 0 && x < position.length && y >= 0 && y < position.length;\r\n// }\r\n\r\n// /**\r\n//  * Creates new position with specified move (with rules applied - position won't contain captured stones).\r\n//  * If move is invalid, null is returned.\r\n//  */\r\n// export function applyMove(position: Position, x: number, y: number, c: Color.B | Color.W, allowSuicide = false) {\r\n//   // check if move is on empty field of the board\r\n//   if (!isOnBoard(position, x, y) || position[x][y] !== Color.EMPTY) {\r\n//     return null;\r\n//   }\r\n\r\n//   // clone position and add a stone\r\n//   const newPosition = clonePosition(position);\r\n//   newPosition[x][y] = c;\r\n\r\n//   // check capturing of all surrounding stones\r\n//   const capturesAbove = captureIfNoLiberties(newPosition, x, y - 1, -c);\r\n//   const capturesRight = captureIfNoLiberties(newPosition, x + 1, y, -c);\r\n//   const capturesBelow = captureIfNoLiberties(newPosition, x, y + 1, -c);\r\n//   const capturesLeft = captureIfNoLiberties(newPosition, x - 1, y, -c);\r\n//   const hasCaptured = capturesAbove || capturesRight || capturesBelow || capturesLeft;\r\n\r\n//   // check suicide\r\n//   if (!hasCaptured) {\r\n//     if (!hasLiberties(newPosition, x, y)) {\r\n//       if (allowSuicide) {\r\n//         capture(newPosition, x, y, c);\r\n//       } else {\r\n//         return null;\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return newPosition;\r\n// }\r\n\r\n// /**\r\n//  * Validate position. Position is tested from 0:0 to size:size, if there are some moves,\r\n//  * that should be captured, they will be removed. Returns a new Position object.\r\n//  */\r\n\r\n// export function getValidatedPosition(position: Position) {\r\n//   const newPosition = clonePosition(position);\r\n\r\n//   for (let x = 0; x < position.length; x++) {\r\n//     for (let y = 0; y < position.length; y++) {\r\n//       captureIfNoLiberties(newPosition, x, y);\r\n//     }\r\n//   }\r\n\r\n//   return newPosition;\r\n// }\r\n\r\n// /**\r\n//  * Capture stone or group of stones if they are zero liberties. Mutates the given position.\r\n//  *\r\n//  * @param position\r\n//  * @param x\r\n//  * @param y\r\n//  * @param c\r\n//  */\r\n// function captureIfNoLiberties(position: Position, x: number, y: number, c: Color = position[x][y]) {\r\n//   let hasCaptured = false;\r\n\r\n//   // is there a stone possible to capture?\r\n//   if (isOnBoard(position, x, y) && c !== Color.EMPTY && position[x][y] === c) {\r\n//     // if it has zero liberties capture it\r\n//     if (!hasLiberties(position, x, y)) {\r\n//       // capture stones from game\r\n//       capture(position, x, y, c);\r\n//       hasCaptured = true;\r\n//     }\r\n//   }\r\n\r\n//   return hasCaptured;\r\n// }\r\n\r\n// function createTestGrid(size: number) {\r\n//   const grid: boolean[][] = [];\r\n//   for (let i = 0; i < size; i++) {\r\n//     grid.push([]);\r\n//   }\r\n//   return grid;\r\n// }\r\n\r\n// /**\r\n//  * Returns true if stone or group on the given position has at least one liberty.\r\n//  */\r\n// function hasLiberties(\r\n//   position: Position,\r\n//   x: number,\r\n//   y: number,\r\n//   alreadyTested = createTestGrid(position.length),\r\n//   c = position[x][y],\r\n// ): boolean {\r\n//   // out of the board there aren't liberties\r\n//   if (!isOnBoard(position, x, y)) {\r\n//     return false;\r\n//   }\r\n\r\n//   // however empty field means liberty\r\n//   if (position[x][y] === Color.EMPTY) {\r\n//     return true;\r\n//   }\r\n\r\n//   // already tested field or stone of enemy isn't a liberty.\r\n//   if (alreadyTested[x][y] || position[x][y] === -c) {\r\n//     return false;\r\n//   }\r\n\r\n//   // set this field as tested\r\n//   alreadyTested[x][y] = true;\r\n\r\n//   // in this case we are checking our stone, if we get 4 false, it has no liberty\r\n//   return (\r\n//     hasLiberties(position, x, y - 1, alreadyTested, c) ||\r\n//     hasLiberties(position, x, y + 1, alreadyTested, c) ||\r\n//     hasLiberties(position, x - 1, y, alreadyTested, c) ||\r\n//     hasLiberties(position, x + 1, y, alreadyTested, c)\r\n//   );\r\n// }\r\n\r\n// /**\r\n//  * Captures/removes stone on specified position and all adjacent and connected stones. This method ignores liberties.\r\n//  * Mutates the given position.\r\n//  */\r\n// function capture(position: Position, x: number, y: number, c: Color = position[x][y]) {\r\n//   if (isOnBoard(position, x, y) && position[x][y] !== Color.EMPTY && position[x][y] === c) {\r\n//     position[x][y] = Color.EMPTY;\r\n\r\n//     capture(position, x, y - 1, c);\r\n//     capture(position, x, y + 1, c);\r\n//     capture(position, x - 1, y, c);\r\n//     capture(position, x + 1, y, c);\r\n//   }\r\n// }\r\n\r\n// /**\r\n//  * For debug purposes.\r\n//  */\r\n// export function stringifyPosition(position: Position) {\r\n//   const TL = '┌';\r\n//   const TM = '┬';\r\n//   const TR = '┐';\r\n//   const ML = '├';\r\n//   const MM = '┼';\r\n//   const MR = '┤';\r\n//   const BL = '└';\r\n//   const BM = '┴';\r\n//   const BR = '┘';\r\n//   const BS = '●';\r\n//   const WS = '○';\r\n//   const HF = '─'; // horizontal fill\r\n\r\n//   let output = '   ';\r\n\r\n//   for (let i = 0; i < position.length; i++) {\r\n//     output += i < 9 ? `${i} ` : i;\r\n//   }\r\n\r\n//   output += '\\n';\r\n\r\n//   for (let y = 0; y < position.length; y++) {\r\n//     for (let x = 0; x < position.length; x++) {\r\n//       const color = position[x][y];\r\n\r\n//       if (x === 0) {\r\n//         output += `${(y < 10 ? ` ${y}` : y)} `;\r\n//       }\r\n\r\n//       if (color !== Color.EMPTY) {\r\n//         output += color === Color.BLACK ? BS : WS;\r\n//       } else {\r\n//         let char;\r\n\r\n//         if (y === 0) {\r\n//           // top line\r\n//           if (x === 0) {\r\n//             char = TL;\r\n//           } else if (x < position.length - 1) {\r\n//             char = TM;\r\n//           } else {\r\n//             char = TR;\r\n//           }\r\n//         } else if (y < position.length - 1) {\r\n//           // middle line\r\n//           if (x === 0) {\r\n//             char = ML;\r\n//           } else if (x < position.length - 1) {\r\n//             char = MM;\r\n//           } else {\r\n//             char = MR;\r\n//           }\r\n//         } else {\r\n//           // bottom line\r\n//           if (x === 0) {\r\n//             char = BL;\r\n//           } else if (x < position.length - 1) {\r\n//             char = BM;\r\n//           } else {\r\n//             char = BR;\r\n//           }\r\n//         }\r\n\r\n//         output += char;\r\n//       }\r\n\r\n//       if (x === position.length - 1) {\r\n//         if (y !== position.length - 1) {\r\n//           output += '\\n';\r\n//         }\r\n//       } else {\r\n//         output += HF;\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return output;\r\n// }\r\n","import { GoRules, JAPANESE_RULES, Repeating } from './rules';\r\nimport Position from './Position';\r\nimport { Color } from '../types';\r\n\r\nexport default class Game {\r\n  size: number;\r\n  rules: GoRules;\r\n  komi: number;\r\n  positionStack: Position[];\r\n\r\n  /**\r\n   * Creates instance of game class.\r\n   *\r\n   * @class\r\n   * This class implements game logic. It basically analyses given moves and returns capture stones.\r\n   * WGo.Game also stores every position from beginning, so it has ability to check repeating positions\r\n   * and it can effectively restore old positions.\r\n   *\r\n   *\r\n   * @param {number} [size = 19] Size of the board\r\n   * @param {string} [checkRepeat = KO] How to handle repeated position:\r\n   *\r\n   * * KO - ko is properly handled - position cannot be same like previous position\r\n   * * ALL - position cannot be same like any previous position - e.g. it forbids triple ko\r\n   * * NONE - position can be repeated\r\n   *\r\n   * @param {boolean} [allowRewrite = false] Allow to play moves, which were already played\r\n   * @param {boolean} [allowSuicide = false] Allow to play suicides, stones are immediately captured\r\n   */\r\n\r\n  constructor(size: number = 19, rules: GoRules = JAPANESE_RULES) {\r\n    this.size = size;\r\n    this.rules = rules;\r\n    this.komi = rules.komi;\r\n    this.positionStack = [new Position(size)];\r\n  }\r\n\r\n  get position() {\r\n    return this.positionStack[this.positionStack.length - 1];\r\n  }\r\n\r\n  set position(pos) {\r\n    this.positionStack[this.positionStack.length - 1] = pos;\r\n  }\r\n\r\n  get turn() {\r\n    return this.position.turn;\r\n  }\r\n\r\n  set turn(color: Color.WHITE | Color.BLACK) {\r\n    this.position.turn = color;\r\n  }\r\n\r\n  get capCount() {\r\n    return this.position.capCount;\r\n  }\r\n\r\n  /**\r\n   * Play move. You can specify color.\r\n   */\r\n  play(x: number, y: number) {\r\n    const nextPosition = this.tryToPlay(x, y);\r\n\r\n    if (nextPosition) {\r\n      this.pushPosition(nextPosition);\r\n    }\r\n\r\n    return nextPosition;\r\n  }\r\n\r\n  /**\r\n   * Tries to play on given coordinates, returns new position after the play, or error code.\r\n   */\r\n  protected tryToPlay(x: number, y: number) {\r\n    const nextPosition = this.position.clone();\r\n    const success = nextPosition.applyMove(x, y, nextPosition.turn, this.rules.allowSuicide, this.rules.allowRewrite);\r\n\r\n    if (success && !this.hasPositionRepeated(nextPosition)) {\r\n      return nextPosition;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {Position} position to check\r\n   * @return {boolean} Returns true if the position didn't occurred in the past (according to the rule set)\r\n   */\r\n  hasPositionRepeated(position: Position): boolean {\r\n    let depth: number;\r\n\r\n    if (this.rules.repeating === Repeating.KO && this.positionStack.length - 2 >= 0) {\r\n      depth = this.positionStack.length - 2;\r\n    } else if (this.rules.repeating === Repeating.NONE) {\r\n      depth = 0;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    for (let i = this.positionStack.length - 1; i >= depth; i--) {\r\n      if (this.positionStack[i].compare(position).length === 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Play pass.\r\n   *\r\n   * @param {(BLACK|WHITE)} c color\r\n   */\r\n\r\n  pass(c: Color.BLACK | Color.WHITE = this.turn) {\r\n    const nextPosition = this.position.clone();\r\n    nextPosition.turn = -(c || this.turn);\r\n    this.pushPosition(nextPosition);\r\n  }\r\n\r\n  /**\r\n   * Finds out validity of the move.\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @return {boolean} true if move can be played.\r\n   */\r\n\r\n  isValid(x: number, y: number): boolean {\r\n    return !!this.tryToPlay(x, y);\r\n  }\r\n\r\n  /**\r\n   * Controls position of the move.\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @return {boolean} true if move is on board.\r\n   */\r\n\r\n  isOnBoard(x: number, y: number): boolean {\r\n    return this.position.isOnPosition(x, y);\r\n  }\r\n\r\n  /**\r\n   * Inserts move into current position. Use for setting position, for example in handicap game. Field must be empty.\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @param {Color} c color\r\n   * @return {boolean} true if operation is successful.\r\n   */\r\n\r\n  addStone(x: number, y: number, c: Color.BLACK | Color.WHITE): boolean {\r\n    if (this.isOnBoard(x, y) && this.position.get(x, y) === Color.EMPTY) {\r\n      this.position.set(x, y, c);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Removes move from current position.\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @return {boolean} true if operation is successful.\r\n   */\r\n\r\n  removeStone(x: number, y: number): boolean {\r\n    if (this.isOnBoard(x, y) && this.position.get(x, y) !== Color.EMPTY) {\r\n      this.position.set(x, y, Color.EMPTY);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set or insert move of current position.\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @param {(BLACK|WHITE)} [c] color\r\n   * @return {boolean} true if operation is successful.\r\n   */\r\n\r\n  setStone(x: number, y: number, c: Color): boolean {\r\n    if (this.isOnBoard(x, y)) {\r\n      this.position.set(x, y, c);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get stone on given position.s\r\n   *\r\n   * @param {number} x coordinate\r\n   * @param {number} y coordinate\r\n   * @return {(Color|null)} color\r\n   */\r\n\r\n  getStone(x: any, y: any): (Color | null) {\r\n    return this.position.get(x, y);\r\n  }\r\n\r\n  /**\r\n   * Add position to stack. If position isn't specified current position is cloned and stacked.\r\n   * Pointer of actual position is moved to the new position.\r\n   *\r\n   * @param {WGo.Position} tmp position (optional)\r\n   */\r\n\r\n  pushPosition(pos: Position) {\r\n    return this.positionStack.push(pos);\r\n  }\r\n\r\n  /**\r\n   * Remove current position from stack. Pointer of actual position is moved to the previous position.\r\n   */\r\n\r\n  popPosition() {\r\n    if (this.positionStack.length > 1) {\r\n      return this.positionStack.pop();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Removes all positions except the initial.\r\n   */\r\n\r\n  clear() {\r\n    this.positionStack = [this.positionStack[0]];\r\n  }\r\n}\r\n","/**\r\n * From SGF specification, there are these types of property values:\r\n *\r\n * CValueType = (ValueType | *Compose*)\r\n * ValueType  = (*None* | *Number* | *Real* | *Double* | *Color* | *SimpleText* | *Text* | *Point*  | *Move* | *Stone*)\r\n *\r\n * WGo's kifu node (KNode object) implements similar types with few exceptions:\r\n *\r\n * - Types `Number`, `Real` and `Double` are implemented by javascript's `number`.\r\n * - Types `SimpleText` and `Text` are considered as the same.\r\n * - Types `Point`, `Move` and `Stone` are all the same, implemented as simple object with `x` and `y` coordinates.\r\n * - Type `None` is implemented as `true`\r\n *\r\n * Each `Compose` type, which is used in SGF, has its own type.\r\n *\r\n * - `Point ':' Point` (used in AR property) has special type `Line` - object with two sets of coordinates.\r\n * - `Point ':' Simpletext` (used in LB property) has special type `Label` - object with coordinates and text property\r\n * - `Simpletext \":\" Simpletext` (used in AP property) - not implemented\r\n * - `Number \":\" SimpleText` (used in FG property) - not implemented\r\n *\r\n * Moreover each property value has these settings:\r\n *\r\n * - *Single value* / *Array* (more values)\r\n * - *Not empty* / *Empty* (value or array can be empty)\r\n *\r\n * {@link http://www.red-bean.com/sgf/sgf4.html}\r\n */\r\n\r\nimport { Color, Point, Label, Vector } from '../types';\r\n\r\ninterface PropertyValueTransformer<T = any> {\r\n  read(str: string): T;\r\n  write(value: T): string;\r\n}\r\n\r\nexport const NONE = {\r\n  read: (str: string) => true,\r\n  write: (value: boolean) => '',\r\n};\r\n\r\nexport const NUMBER = {\r\n  read: (str: string) => parseFloat(str),\r\n  write: (value: number) => value.toString(10),\r\n};\r\n\r\nexport const TEXT = {\r\n  read: (str: string) => str,\r\n  write: (value: string) => value,\r\n};\r\n\r\nexport const COLOR = {\r\n  read: (str: string) => (str === 'w' || str === 'W' ? Color.WHITE : Color.BLACK),\r\n  write: (value: Color) => (value === Color.WHITE ? 'W' : 'B'),\r\n};\r\n\r\nexport const POINT = {\r\n  read: (str: string): Point => str ? {\r\n    x: str.charCodeAt(0) - 97,\r\n    y: str.charCodeAt(1) - 97,\r\n  } : null,\r\n  write: (value?: Point) => value ? String.fromCharCode(value.x + 97) + String.fromCharCode(value.y + 97) : '',\r\n};\r\n\r\nexport const LABEL = {\r\n  read: (str: string): Label => ({\r\n    x: str.charCodeAt(0) - 97,\r\n    y: str.charCodeAt(1) - 97,\r\n    text: str.substr(3),\r\n  }),\r\n  write: (value: Label) => (\r\n    `${String.fromCharCode(value.x + 97) + String.fromCharCode(value.y + 97)}:${value.text}`\r\n  ),\r\n};\r\n\r\nexport const VECTOR = {\r\n  read: (str: string): Vector => str ? [\r\n    {\r\n      x: str.charCodeAt(0) - 97,\r\n      y: str.charCodeAt(1) - 97,\r\n    },\r\n    {\r\n      x: str.charCodeAt(3) - 97,\r\n      y: str.charCodeAt(4) - 97,\r\n    },\r\n  ] : null,\r\n  write: (value?: Vector) => (\r\n    // tslint:disable-next-line:max-line-length\r\n    value ? `${String.fromCharCode(value[0].x + 97) + String.fromCharCode(value[0].y + 97)}:${String.fromCharCode(value[1].x + 97) + String.fromCharCode(value[1].y + 97)}` : ''\r\n  ),\r\n};\r\n\r\n/// Property definitions --------------------------------------------------------------------------\r\n\r\ninterface PropertyValueDefinition<T> {\r\n  transformer: PropertyValueTransformer<T>;\r\n  multiple: boolean;\r\n  notEmpty: boolean;\r\n}\r\n\r\nconst propertyValueTypes: {[propIdent: string]: PropertyValueDefinition<any>} = {\r\n  _default: {\r\n    transformer: TEXT,\r\n    multiple: false,\r\n    notEmpty: true,\r\n  },\r\n};\r\n\r\n/// Move properties -------------------------------------------------------------------------------\r\n\r\npropertyValueTypes.B = propertyValueTypes.W = {\r\n  transformer: POINT,\r\n  multiple: false,\r\n  notEmpty: false,\r\n};\r\n\r\npropertyValueTypes.KO = {\r\n  transformer: NONE,\r\n  multiple: false,\r\n  notEmpty: false,\r\n};\r\n\r\npropertyValueTypes.MN = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Setup properties ------------------------------------------------------------------------------\r\n\r\npropertyValueTypes.AB = propertyValueTypes.AW = propertyValueTypes.AE = {\r\n  transformer: POINT,\r\n  multiple: true,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.PL = {\r\n  transformer: COLOR,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Node annotation properties --------------------------------------------------------------------\r\n\r\npropertyValueTypes.C = propertyValueTypes.N = {\r\n  transformer: TEXT,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n// tslint:disable-next-line:max-line-length\r\npropertyValueTypes.DM = propertyValueTypes.GB = propertyValueTypes.GW = propertyValueTypes.HO = propertyValueTypes.UC = propertyValueTypes.V = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Move annotation properties --------------------------------------------------------------------\r\n\r\npropertyValueTypes.BM = propertyValueTypes.TE = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.DO = propertyValueTypes.IT = {\r\n  transformer: NONE,\r\n  multiple: false,\r\n  notEmpty: false,\r\n};\r\n\r\n/// Markup properties -----------------------------------------------------------------------------\r\n\r\n// tslint:disable-next-line:max-line-length\r\npropertyValueTypes.CR = propertyValueTypes.MA = propertyValueTypes.SL = propertyValueTypes.SQ = propertyValueTypes.TR = {\r\n  transformer: POINT,\r\n  multiple: true,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.LB = {\r\n  transformer: LABEL,\r\n  multiple: true,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.AR = propertyValueTypes.LN = {\r\n  transformer: VECTOR,\r\n  multiple: true,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.DD = propertyValueTypes.TB = propertyValueTypes.TW = {\r\n  transformer: POINT,\r\n  multiple: true,\r\n  notEmpty: false,\r\n};\r\n\r\n/// Root properties -------------------------------------------------------------------------------\r\n\r\npropertyValueTypes.AP = propertyValueTypes.CA = {\r\n  transformer: TEXT,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n// note: rectangular board is not implemented (in SZ property)\r\npropertyValueTypes.FF = propertyValueTypes.GM = propertyValueTypes.ST = propertyValueTypes.SZ = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Game info properties --------------------------------------------------------------------------\r\n\r\npropertyValueTypes.AN = propertyValueTypes.BR = propertyValueTypes.BT =\r\npropertyValueTypes.CP = propertyValueTypes.DT = propertyValueTypes.EV =\r\npropertyValueTypes.GN = propertyValueTypes.GC = propertyValueTypes.GN =\r\npropertyValueTypes.ON = propertyValueTypes.OT = propertyValueTypes.PB =\r\npropertyValueTypes.PC = propertyValueTypes.PW = propertyValueTypes.RE =\r\npropertyValueTypes.RO = propertyValueTypes.RU = propertyValueTypes.SO =\r\npropertyValueTypes.US = propertyValueTypes.WR = propertyValueTypes.WT = {\r\n  transformer: TEXT,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\npropertyValueTypes.TM = propertyValueTypes.HA = propertyValueTypes.KM = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Timing properties -----------------------------------------------------------------------------\r\n\r\npropertyValueTypes.BL = propertyValueTypes.WL = propertyValueTypes.OB = propertyValueTypes.OW = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n/// Miscellaneous properties ----------------------------------------------------------------------\r\n\r\npropertyValueTypes.PM = {\r\n  transformer: NUMBER,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\n// VW property must be specified as compressed list (ab:cd) and only one value is allowed\r\n// empty value [] will reset the viewport. Other options are not supported.\r\npropertyValueTypes.VW = {\r\n  transformer: VECTOR,\r\n  multiple: false,\r\n  notEmpty: true,\r\n};\r\n\r\nexport default propertyValueTypes;\r\n","import SGFParser, { SGFSyntaxError } from '../SGFParser';\r\nimport propertyValueTypes from './propertyValueTypes';\r\nimport { SGFGameTree, SGFProperties } from '../SGFParser/sgfTypes';\r\n\r\nconst processJSGF = function (gameTree: SGFGameTree) {\r\n  const rootNode = new KifuNode();\r\n  rootNode.setSGFProperties(gameTree.sequence[0] || {});\r\n\r\n  let lastNode = rootNode;\r\n\r\n  for (let i = 1; i < gameTree.sequence.length; i++) {\r\n    const node = new KifuNode();\r\n    node.setSGFProperties(gameTree.sequence[i]);\r\n    lastNode.appendChild(node);\r\n    lastNode = node;\r\n  }\r\n\r\n  for (let i = 0; i < gameTree.children.length; i++) {\r\n    lastNode.appendChild(processJSGF(gameTree.children[i]));\r\n  }\r\n\r\n  return rootNode;\r\n};\r\n\r\n/**\r\n * Contains path to certain node in game tree.\r\n */\r\nexport interface Path {\r\n  /** Depth of node (for root node it is 0) */\r\n  depth: number;\r\n  /** Array of children array indexes of all predecessors which have siblings. */\r\n  forks: number[];\r\n}\r\n\r\n/**\r\n * Class representing one kifu node.\r\n */\r\nexport default class KifuNode {\r\n  parent: KifuNode | null;\r\n  children: KifuNode[];\r\n  properties: {[key: string]: any};\r\n\r\n  constructor() {\r\n    this.parent = null;\r\n    this.children = [];\r\n    this.properties = {};\r\n  }\r\n\r\n  get root() {\r\n    // tslint:disable-next-line:no-this-assignment\r\n    let node: KifuNode = this;\r\n\r\n    while (node.parent != null) {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /*set innerSGF(sgf: string) {\r\n    this.setFromSGF(sgf);\r\n  }*/\r\n\r\n  get innerSGF(): string {\r\n    let output = ';';\r\n\r\n    for (const propIdent in this.properties) {\r\n      if (this.properties.hasOwnProperty(propIdent)) {\r\n        output += propIdent + this.getSGFProperty(propIdent);\r\n      }\r\n    }\r\n\r\n    if (this.children.length === 1) {\r\n      return `${output};${this.children[0].innerSGF}`;\r\n    }\r\n    if (this.children.length > 1) {\r\n      return this.children.reduce((prev, current) => `${prev}(;${current.innerSGF})`, output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  getPath() {\r\n    const path: Path = { depth: 0, forks: [] };\r\n    // tslint:disable-next-line:no-this-assignment\r\n    let node: KifuNode = this;\r\n\r\n    while (node.parent) {\r\n      path.depth++;\r\n      if (node.parent.children.length > 1) {\r\n        path.forks.unshift(node.parent.children.indexOf(node));\r\n      }\r\n      node = node.parent;\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  /// GENERAL TREE NODE MANIPULATION METHODS (subset of DOM API's Node)\r\n\r\n  /**\r\n   * Insert a KNode as the last child node of this node.\r\n   *\r\n   * @throws  {Error} when argument is invalid.\r\n   * @param   {KifuNode} node to append.\r\n   * @returns {number} position(index) of appended node.\r\n   */\r\n\r\n  appendChild(node: KifuNode): number {\r\n    if (node == null || !(node instanceof KifuNode) || node === this) {\r\n      throw new Error('Invalid argument passed to `appendChild` method, KNode was expected.');\r\n    }\r\n\r\n    if (node.parent) {\r\n      node.parent.removeChild(node);\r\n    }\r\n\r\n    node.parent = this;\r\n\r\n    return this.children.push(node) - 1;\r\n  }\r\n\r\n  /**\r\n   * Hard clones a KNode and all of its contents.\r\n   *\r\n   * @param {boolean}  appendToParent if set true, cloned node will be appended to this parent.\r\n   * @returns {KifuNode}  cloned node\r\n   */\r\n\r\n  /*cloneNode(appendToParent?: boolean): KNode {\r\n    const node = new KNode();\r\n    node.innerSGF = this.innerSGF;\r\n\r\n    if (appendToParent && this.parent) {\r\n      this.parent.appendChild(node);\r\n    }\r\n\r\n    return node;\r\n  }*/\r\n\r\n  /**\r\n   * Returns a Boolean value indicating whether a node is a descendant of a given node or not.\r\n   *\r\n   * @param   {KifuNode}   node to be tested\r\n   * @returns {boolean} true, if this node contains given node.\r\n   */\r\n\r\n  contains(node: KifuNode): boolean {\r\n    if (this.children.indexOf(node) >= 0) {\r\n      return true;\r\n    }\r\n\r\n    return this.children.some(child => child.contains(node));\r\n  }\r\n\r\n  /**\r\n   * Inserts the first KNode given in a parameter immediately before the second, child of this KNode.\r\n   *\r\n   * @throws  {Error}   when argument is invalid.\r\n   * @param   {KifuNode}   newNode       node to be inserted\r\n   * @param   {(KifuNode)} referenceNode reference node, if omitted, new node will be inserted at the end.\r\n   * @returns {KifuNode}   this node\r\n   */\r\n\r\n  insertBefore(newNode: KifuNode, referenceNode?: KifuNode): KifuNode {\r\n    if (newNode == null || !(newNode instanceof KifuNode) || newNode === this) {\r\n      throw new Error('Invalid argument passed to `insertBefore` method, KNode was expected.');\r\n    }\r\n    if (referenceNode == null) {\r\n      this.appendChild(newNode);\r\n      return this;\r\n    }\r\n\r\n    if (newNode.parent) {\r\n      newNode.parent.removeChild(newNode);\r\n    }\r\n\r\n    newNode.parent = this;\r\n\r\n    this.children.splice(this.children.indexOf(referenceNode), 0, newNode);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes a child node from the current element, which must be a child of the current node.\r\n   *\r\n   * @param   {KifuNode} child node to be removed\r\n   * @returns {KifuNode}  this node\r\n   */\r\n\r\n  removeChild(child: KifuNode): KifuNode {\r\n    this.children.splice(this.children.indexOf(child), 1);\r\n\r\n    child.parent = null;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Replaces one child Node of the current one with the second one given in parameter.\r\n   *\r\n   * @throws  {Error} when argument is invalid\r\n   * @param   {KifuNode} newChild node to be inserted\r\n   * @param   {KifuNode} oldChild node to be replaced\r\n   * @returns {KifuNode} this node\r\n   */\r\n\r\n  replaceChild(newChild: KifuNode, oldChild: KifuNode): KifuNode {\r\n    if (newChild == null || !(newChild instanceof KifuNode) || newChild === this) {\r\n      throw new Error('Invalid argument passed to `replaceChild` method, KNode was expected.');\r\n    }\r\n\r\n    this.insertBefore(newChild, oldChild);\r\n    this.removeChild(oldChild);\r\n\r\n    return this;\r\n  }\r\n\r\n  /// BASIC PROPERTY GETTER and SETTER\r\n\r\n  /**\r\n   * Gets property by SGF property identificator. Returns property value (type depends on property type)\r\n   *\r\n   * @param   {string}   propIdent - SGF property idetificator\r\n   * @returns {any}    property value or values or undefined, if property is missing.\r\n   */\r\n\r\n  getProperty(propIdent: string): any {\r\n    return this.properties[propIdent];\r\n  }\r\n\r\n  /**\r\n   * Sets property by SGF property identificator.\r\n   *\r\n   * @param   {string}  propIdent - SGF property idetificator\r\n   * @param   {any}     value - property value or values\r\n   */\r\n\r\n  setProperty(propIdent: string, value?: any) {\r\n    if (value == null) {\r\n      delete this.properties[propIdent];\r\n    } else {\r\n      this.properties[propIdent] = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /// SGF RAW METHODS\r\n\r\n  /**\r\n   * Gets one SGF property value as string (with brackets `[` and `]`).\r\n   *\r\n   * @param   {string} propIdent SGF property identificator.\r\n   * @returns {string[]} Array of SGF property values or null if there is not such property.\r\n   */\r\n\r\n  getSGFProperty(propIdent: string): string[] {\r\n    if (this.properties[propIdent] != null) {\r\n      const propertyValueType = propertyValueTypes[propIdent] || propertyValueTypes._default;\r\n\r\n      if (Array.isArray(this.properties[propIdent])) {\r\n        return this.properties[propIdent].map(\r\n          (propValue: any) => propertyValueType.transformer.write(propValue).replace(/\\]/g, '\\\\]'),\r\n        );\r\n      }\r\n\r\n      return [propertyValueType.transformer.write(this.properties[propIdent]).replace(/\\]/g, '\\\\]')];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets one SGF property.\r\n   *\r\n   * @param   {string}   propIdent SGF property identificator\r\n   * @param   {string[]} propValues SGF property values\r\n   * @returns {KifuNode}    this KNode for chaining\r\n   */\r\n\r\n  setSGFProperty(propIdent: string, propValues?: string[]): KifuNode {\r\n    const propertyValueType = propertyValueTypes[propIdent] || propertyValueTypes._default;\r\n\r\n    if (propValues == null) {\r\n      delete this.properties[propIdent];\r\n      return this;\r\n    }\r\n\r\n    if (propertyValueType.multiple) {\r\n      this.properties[propIdent] = propValues.map(val => propertyValueType.transformer.read(val));\r\n    } else {\r\n      this.properties[propIdent] = propertyValueType.transformer.read(propValues[0]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets multiple SGF properties.\r\n   *\r\n   * @param   {Object}   properties - map with signature propIdent -> propValues.\r\n   * @returns {KifuNode}    this KNode for chaining\r\n   */\r\n\r\n  setSGFProperties(properties: SGFProperties): KifuNode {\r\n    for (const ident in properties) {\r\n      if (properties.hasOwnProperty(ident)) {\r\n        this.setSGFProperty(ident, properties[ident as keyof SGFProperties]);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets properties of Kifu node based on the sgf string. Usually you won't use this method directly,\r\n   * but use innerSGF property instead.\r\n   *\r\n   * Basically it parsers the sgf, takes properties from it and adds them to the node.\r\n   * Then if there are other nodes in the string, they will be appended to the node as well.\r\n   *\r\n   * @param {string} sgf SGF text for current node. It must be without trailing `;`,\r\n   *                     however it can contain following nodes.\r\n   * @throws {SGFSyntaxError} throws exception, if sgf string contains invalid SGF.\r\n   */\r\n\r\n  /*setFromSGF(sgf: string) {\r\n    // clean up\r\n    for (let i = this.children.length - 1; i >= 0; i--) {\r\n      this.removeChild(this.children[i]);\r\n    }\r\n    this.SGFProperties = {};\r\n\r\n    // sgf sequence to parse must start with ;\r\n    const sgfSequence = sgf[0] === ';' ? sgf : `;${sgf}`;\r\n\r\n    const parser = new SGFParser(sgfSequence);\r\n\r\n    const sequence = parser.parseSequence();\r\n  }*/\r\n\r\n  /**\r\n   * Transforms KNode object to standard SGF string.\r\n   */\r\n  toSGF() {\r\n    return `(${this.innerSGF})`;\r\n  }\r\n\r\n  /**\r\n   * Creates KNode object from SGF transformed to JavaScript object.\r\n   * @param gameTree\r\n   */\r\n  static fromJS(gameTree: SGFGameTree) {\r\n    return processJSGF(gameTree);\r\n  }\r\n\r\n  /**\r\n   * Creates KNode object from SGF string.\r\n   *\r\n   * @param sgf\r\n   * @param gameNo\r\n   */\r\n  static fromSGF(sgf: string, gameNo: number = 0) {\r\n    const parser = new SGFParser(sgf);\r\n    return KifuNode.fromJS(parser.parseCollection()[gameNo]);\r\n  }\r\n}\r\n","export enum PropIdent {\r\n  // Move Properties\r\n  BLACK_MOVE = 'B',\r\n  EXECUTE_ILLEGAL = 'KO',\r\n  MOVE_NUMBER = 'MN',\r\n  WHITE_MOVE = 'W',\r\n\r\n  // Setup Properties\r\n  ADD_BLACK = 'AB',\r\n  CLEAR_FIELD = 'AE',\r\n  ADD_WHITE = 'AW',\r\n  SET_TURN = 'PL',\r\n\r\n  // Node Annotation Properties\r\n  COMMENT = 'C',\r\n  EVEN_POSITION = 'DM',\r\n  GOOD_FOR_BLACK = 'GB',\r\n  GOOD_FOR_WHITE = 'GW',\r\n  HOTSPOT = 'HO',\r\n  NODE_NAME = 'N',\r\n  UNCLEAR_POSITION = 'UC',\r\n  NODE_VALUE = 'V',\r\n\r\n  // Move Annotation Properties\r\n  BAD_MOVE = 'BM',\r\n  DOUBTFUL_MOVE = 'DM',\r\n  INTERESTING_MOVE = 'IT',\r\n  GOOD_MOVE = 'TE',\r\n\r\n  // Markup Properties\r\n  ARROW = 'AR',\r\n  CIRCLE = 'CR',\r\n  DIM = 'DD',\r\n  LABEL = 'LB',\r\n  LINE = 'LN',\r\n  X_MARK = 'MA',\r\n  SELECTED = 'SL',\r\n  SQUARE = 'SQ',\r\n  TRIANGLE = 'TR',\r\n\r\n  // Root Properties\r\n  APPLICATION = 'AP',\r\n  CHARSET = 'CA',\r\n  SGF_VERSION = 'FF',\r\n  GAME_TYPE = 'GM',\r\n  VARIATIONS_STYLE = 'ST',\r\n  BOARD_SIZE = 'SZ',\r\n\r\n  // Game Info Properties\r\n  ANNOTATOR = 'AN',\r\n  BLACK_RANK = 'BR',\r\n  BLACK_TEAM = 'BT',\r\n  COPYRIGHT = 'CP',\r\n  DATE = 'DT',\r\n  EVENT = 'EV',\r\n  GAME_NAME = 'GN',\r\n  GAME_COMMENT = 'GC',\r\n  OPENING_INFO = 'ON',\r\n  OVER_TIME = 'OT',\r\n  BLACK_NAME = 'BN',\r\n  PLACE = 'PC',\r\n  WHITE_NAME = 'PW',\r\n  RESULT = 'RE',\r\n  ROUND = 'RO',\r\n  RULES = 'RU',\r\n  SOURCE = 'SO',\r\n  TIME_LIMITS = 'TM',\r\n  AUTHOR = 'US',\r\n  WHITE_RANK = 'WR',\r\n  WHITE_TEAM = 'WT',\r\n\r\n  // Timing Properties\r\n  BLACK_TIME_LEFT = 'BL',\r\n  BLACK_STONES_LEFT = 'OB',\r\n  WHITE_STONES_LEFT = 'OW',\r\n  WHITE_TIME_LEFT = 'WL',\r\n\r\n  // Miscellaneous Properties\r\n  FIGURE = 'FG',\r\n  PRINT_MOVE_NUMBERS = 'PM',\r\n  BOARD_SECTION = 'VW',\r\n  HANDICAP = 'HA',\r\n\r\n  // GO specific Properties\r\n  KOMI = 'KM',\r\n  BLACK_TERRITORY = 'TB',\r\n  WHITE_TERRITORY = 'TW',\r\n}\r\n\r\nexport type SGFProperties = {\r\n  [key in PropIdent]?: string[];\r\n};\r\n\r\nexport type SGFNode = SGFProperties;\r\n\r\nexport interface SGFGameTree {\r\n  sequence: SGFNode[];\r\n  children: SGFGameTree[];\r\n}\r\n\r\nexport type SGFCollection = SGFGameTree[];\r\n","import PlayerBase from '../PlayerBase';\r\nimport EventEmitter from '../../utils/EventEmitter';\r\n\r\nexport default abstract class PropertyHandler<V, D = void> {\r\n  type: string;\r\n\r\n  constructor(type: string) {\r\n    this.type = type;\r\n  }\r\n\r\n  beforeInit?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  afterInit?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  beforeMove?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  afterMove?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  nextNode?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  previousNode?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  beforeNextNode?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n  beforePreviousNode?(valueOrValues: V, player: PlayerBase, propertyData: D): D;\r\n\r\n  register(player: PlayerBase) {\r\n    this.registerEvent(player, 'beforeInit');\r\n    this.registerEvent(player, 'afterInit');\r\n    this.registerEvent(player, 'beforeMove');\r\n    this.registerEvent(player, 'afterMove');\r\n    this.registerEvent(player, 'nextNode');\r\n    this.registerEvent(player, 'previousNode');\r\n    this.registerEvent(player, 'beforeNextNode');\r\n    this.registerEvent(player, 'beforePreviousNode');\r\n  }\r\n\r\n  private registerEvent(player: PlayerBase, event: keyof PropertyHandler<V, D>) {\r\n    if (this[event]) {\r\n      player.on(\r\n        `${event}:${this.type}`,\r\n        (value: V, propertyData: D, setPropertyData: (data: D) => void) => {\r\n          setPropertyData((this[event] as Function)(value, player, propertyData));\r\n        },\r\n      );\r\n    }\r\n  }\r\n}\r\n","import PlayerBase from '../PlayerBase';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Point, Color } from '../../types';\r\n\r\nexport default class SetupHandler extends PropertyHandler<Point[]> {\r\n  color: Color;\r\n\r\n  constructor(type: string, color: Color) {\r\n    super(type);\r\n    this.color = color;\r\n  }\r\n\r\n  beforeMove(values: Point[], player: PlayerBase) {\r\n    values.forEach((value) => {\r\n      // add stone\r\n      player.game.setStone(value.x, value.y, this.color);\r\n    });\r\n  }\r\n}\r\n","import PlayerBase from '../PlayerBase';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Color } from '../../types';\r\n\r\nexport default class SetTurnHandler extends PropertyHandler<Color.BLACK | Color.WHITE> {\r\n  constructor() {\r\n    super('PL');\r\n  }\r\n\r\n  afterMove(value: Color.BLACK | Color.WHITE, player: PlayerBase) {\r\n    player.game.turn = value;\r\n  }\r\n}\r\n","import PlayerBase from '../PlayerBase';\r\nimport PropertyHandler from './PropertyHandler';\r\n\r\nexport default class BoardSizeHandler extends PropertyHandler<number> {\r\n  constructor() {\r\n    super('SZ');\r\n  }\r\n\r\n  beforeInit(value: number, player: PlayerBase) {\r\n    player.params.size = value;\r\n  }\r\n}\r\n","import PlayerBase from '../PlayerBase';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { goRules } from '../../Game';\r\n\r\nexport default class RulesHandler extends PropertyHandler<string> {\r\n  constructor() {\r\n    super('RU');\r\n  }\r\n\r\n  beforeInit(value: string, player: PlayerBase) {\r\n    if ((goRules as any)[value]) {\r\n      player.params.rules = (goRules as any)[value];\r\n    }\r\n  }\r\n}\r\n","import PlayerBase from '../PlayerBase';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Color } from '../../types';\r\n\r\nexport default class HandicapHandler extends PropertyHandler<number> {\r\n  constructor() {\r\n    super('HA');\r\n  }\r\n\r\n  afterInit(value: number, player: PlayerBase) {\r\n    if (value > 1) {\r\n      player.game.turn = Color.WHITE;\r\n    }\r\n  }\r\n}\r\n","import SetupHandler from './SetupHandler';\r\nimport SetTurnHandler from './SetTurnHandler';\r\nimport { Color } from '../../types';\r\nimport BoardSizeHandler from './BoardSizeHandler';\r\nimport RulesHandler from './RulesHandler';\r\nimport HandicapHandler from './HandicapHandler';\r\n\r\nexport default [\r\n  new BoardSizeHandler(),\r\n  new RulesHandler(),\r\n  new HandicapHandler(),\r\n  new SetupHandler('AW', Color.WHITE),\r\n  new SetupHandler('AB', Color.BLACK),\r\n  new SetupHandler('AE', Color.EMPTY),\r\n  new SetTurnHandler(),\r\n];\r\n","import KifuNode, { Path } from '../kifu/KifuNode';\r\nimport EventEmitter from '../utils/EventEmitter';\r\nimport { Game, goRules, GoRules, JAPANESE_RULES } from '../Game';\r\nimport { PropIdent } from '../SGFParser/sgfTypes';\r\nimport { Point, Color } from '../types';\r\nimport PropertyHandler from './propertyHandlers/PropertyHandler';\r\nimport basePropertyHandlers from './propertyHandlers/basePropertyHandlers';\r\n\r\ninterface PlayerParams {\r\n  size: number;\r\n  rules: GoRules;\r\n  [key: string]: any;\r\n}\r\n\r\nexport default class PlayerBase extends EventEmitter {\r\n  rootNode: KifuNode;\r\n  currentNode: KifuNode;\r\n  game: Game;\r\n\r\n  // player params defined by SGF\r\n  params: PlayerParams;\r\n\r\n  // data bounded to SGF properties\r\n  propertiesData: Map<KifuNode, { [propIdent: string]: any }>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.registerPropertyHandlers(basePropertyHandlers);\r\n  }\r\n\r\n  /**\r\n   * Load game (kifu) from KifuNode.\r\n   */\r\n  loadKifu(rootNode: KifuNode) {\r\n    this.rootNode = rootNode;\r\n    this.currentNode = rootNode;\r\n\r\n    // init properties data map\r\n    this.propertiesData = new Map();\r\n\r\n    // set default params\r\n    this.params = {\r\n      size: 19,\r\n      rules: JAPANESE_RULES,\r\n    };\r\n\r\n    this.executeRoot();\r\n  }\r\n\r\n  /**\r\n   * Create new game (kifu) and init player with it.\r\n   */\r\n  newGame(size?: number, rules?: GoRules) {\r\n    const rootNode = new KifuNode();\r\n\r\n    if (size) {\r\n      rootNode.setProperty('SZ', size);\r\n    }\r\n\r\n    if (rules) {\r\n      // TODO: handle rules more correctly\r\n      const rulesName = Object.keys(goRules).find(name => (goRules as any)[name] === rules);\r\n      if (rulesName) {\r\n        rootNode.setProperty('RU', rulesName);\r\n      }\r\n    }\r\n\r\n    this.loadKifu(rootNode);\r\n  }\r\n\r\n  /**\r\n   * Register event listeners for SGF properties.\r\n   */\r\n  protected registerPropertyHandlers(propertyHandlers: PropertyHandler<any, any>[]) {\r\n    propertyHandlers.forEach(handler => handler.register(this));\r\n  }\r\n\r\n  /**\r\n   * Executes root properties during initialization. If some properties change, call this to re-init player.\r\n   */\r\n  protected executeRoot() {\r\n    this.emitNodeLifeCycleEvent('beforeInit');\r\n    this.game = new Game(this.params.size, this.params.rules);\r\n    this.emitNodeLifeCycleEvent('afterInit');\r\n\r\n    this.executeMove();\r\n    this.emitNodeLifeCycleEvent('nextNode');\r\n  }\r\n\r\n  /**\r\n   * Change current node to specified next node and executes its properties.\r\n   */\r\n  protected executeNext(i: number) {\r\n    this.emitNodeLifeCycleEvent('beforeNextNode');\r\n\r\n    this.game.pushPosition(this.game.position.clone());\r\n    this.currentNode = this.currentNode.children[i];\r\n\r\n    this.executeMove();\r\n    this.emitNodeLifeCycleEvent('nextNode');\r\n  }\r\n\r\n  /**\r\n   * Change current node to previous/parent next node and executes its properties.\r\n   */\r\n  protected executePrevious() {\r\n    this.emitNodeLifeCycleEvent('beforePreviousNode');\r\n    this.game.popPosition();\r\n    this.currentNode = this.currentNode.parent;\r\n    this.emitNodeLifeCycleEvent('previousNode');\r\n  }\r\n\r\n  /**\r\n   * Executes a move (black or white) - changes game position and sets turn.\r\n   */\r\n  protected executeMove() {\r\n    this.emitNodeLifeCycleEvent('beforeMove');\r\n\r\n    // Execute move - B or W property - these properties are vital in this player implementation therefore hard coded.\r\n    const blackMove: Point = this.getProperty(PropIdent.BLACK_MOVE);\r\n    const whiteMove: Point = this.getProperty(PropIdent.WHITE_MOVE);\r\n\r\n    if (blackMove !== undefined && whiteMove !== undefined) {\r\n      // TODO: change this to custom (kifu) error.\r\n      throw new TypeError('Black (B) and white (W) properties must not be mixed within a node.');\r\n    }\r\n\r\n    if (blackMove !== undefined) {\r\n      if (blackMove) {\r\n        this.game.position.applyMove(blackMove.x, blackMove.y, Color.BLACK, true, true);\r\n      } else {\r\n        // black passes\r\n        this.game.position.turn = Color.WHITE;\r\n      }\r\n    } else if (whiteMove !== undefined) {\r\n      if (whiteMove) {\r\n        this.game.position.applyMove(whiteMove.x, whiteMove.y, Color.WHITE, true, true);\r\n      } else {\r\n        // white passes\r\n        this.game.position.turn = Color.BLACK;\r\n      }\r\n    }\r\n\r\n    this.emitNodeLifeCycleEvent('afterMove');\r\n  }\r\n\r\n  /**\r\n   * Emits node life cycle method (for every property)\r\n   */\r\n  protected emitNodeLifeCycleEvent(name: string) {\r\n    this.emit(name);\r\n\r\n    Object.keys(this.currentNode.properties).forEach((propIdent) => {\r\n      this.emit(\r\n        `${name}:${propIdent}`,\r\n        this.currentNode.properties[propIdent],\r\n        this.getPropertyData(propIdent),\r\n        this.setPropertyData.bind(this, propIdent),\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets property data of current node - data are temporary not related to SGF.\r\n   */\r\n  getPropertyData(propIdent: string) {\r\n    const currentNodeData = this.propertiesData.get(this.currentNode);\r\n    return currentNodeData ? currentNodeData[propIdent] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Sets property data of current node - data are temporary not related to SGF.\r\n   */\r\n  setPropertyData(propIdent: string, data: any) {\r\n    let currentNodeData = this.propertiesData.get(this.currentNode);\r\n\r\n    if (data == null) {\r\n      if (currentNodeData) {\r\n        delete currentNodeData[propIdent];\r\n      }\r\n    } else {\r\n      if (!currentNodeData) {\r\n        currentNodeData = {};\r\n        this.propertiesData.set(this.currentNode, currentNodeData);\r\n      }\r\n      currentNodeData[propIdent] = data;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets property of current node.\r\n   */\r\n  getProperty(propIdent: PropIdent) {\r\n    return this.currentNode.getProperty(propIdent);\r\n  }\r\n\r\n  /**\r\n   * Sets property of current node.\r\n   */\r\n  // setProperty(propIdent: PropIdent) {\r\n  //   return this.currentNode.setProperty(propIdent);\r\n  // }\r\n\r\n  /**\r\n   * Gets property of root node.\r\n   */\r\n  getRootProperty(propIdent: PropIdent) {\r\n    return this.rootNode.getProperty(propIdent);\r\n  }\r\n\r\n  /**\r\n   * Returns array of next nodes (children).\r\n   */\r\n  getNextNodes() {\r\n    return this.currentNode.children;\r\n  }\r\n\r\n  /**\r\n   * Go to (specified) next node and execute it.\r\n   */\r\n  next(node: number | KifuNode = 0) {\r\n    if (this.currentNode.children.length) {\r\n      let i: number;\r\n\r\n      if (typeof node === 'number') {\r\n        i = node;\r\n      } else {\r\n        i = this.currentNode.children.indexOf(node);\r\n      }\r\n\r\n      if (this.currentNode.children[i]) {\r\n        this.executeNext(i);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Go to the previous node.\r\n   */\r\n  previous() {\r\n    if (this.currentNode.parent) {\r\n      this.executePrevious();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Go to the first position - root node.\r\n   */\r\n  first() {\r\n    // not sure if effective - TODO: check if there is a better way to do this\r\n    while (this.previous()) {}\r\n  }\r\n\r\n  /**\r\n   * Go to the last position.\r\n   */\r\n  last() {\r\n    while (this.next()) {}\r\n  }\r\n\r\n  /**\r\n   * Go to specified path.\r\n   */\r\n  goTo(pathOrMoveNumber: Path | number) {\r\n    // TODO: check if there is a better way to do this\r\n    const path = typeof pathOrMoveNumber === 'number' ? { depth: pathOrMoveNumber, forks: [] } : pathOrMoveNumber;\r\n    this.first();\r\n\r\n    for (let i = 0, j = 0; i < path.depth; i++) {\r\n      if (this.currentNode.children.length > 1) {\r\n        this.next(path.forks[j++]);\r\n      } else {\r\n        this.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Go to previous fork (a node with more than one child).\r\n\t */\r\n  previousFork() {\r\n    while (this.previous()) {\r\n      if (this.currentNode.children.length > 1) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BoardMarkupObject, BoardObject } from '../../CanvasBoard';\r\nimport PlainPlayer from '../PlainPlayer';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Point } from '../../types';\r\n\r\nexport default class MarkupHandler extends PropertyHandler<Point[], BoardObject[]> {\r\n  nextNode(values: Point[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    const objects: BoardObject[] = [];\r\n\r\n    values.forEach((value) => {\r\n      // add markup\r\n      const boardMarkup = new BoardMarkupObject(this.type, player.game.getStone(value.x, value.y));\r\n      boardMarkup.zIndex = 10;\r\n      player.board.addObjectAt(value.x, value.y, boardMarkup);\r\n      objects.push(boardMarkup);\r\n    });\r\n\r\n    return objects;\r\n  }\r\n\r\n  previousNode(values: Point[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.nextNode(values, player, propertyData);\r\n  }\r\n\r\n  beforeNextNode(values: Point[], player: PlainPlayer, propertyData: BoardObject[]): BoardObject[] {\r\n    propertyData.forEach((object) => {\r\n      player.board.removeObject(object);\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  beforePreviousNode(values: Point[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.beforeNextNode(values, player, propertyData);\r\n  }\r\n}\r\n","import { BoardMarkupObject, BoardObject } from '../../CanvasBoard';\r\nimport PlainPlayer from '../PlainPlayer';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Point } from '../../types';\r\n\r\nfunction samePoint(p1: Point, p2: any) {\r\n  return p2 && p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\nfunction isThereMarkup(ignore: string, field: Point, properties: { [key: string]: any }) {\r\n  const propIdents = Object.keys(properties);\r\n\r\n  for (let i = 0; i < propIdents.length; i++) {\r\n    if (propIdents[i] === ignore) {\r\n      continue;\r\n    }\r\n\r\n    const value = properties[propIdents[i]];\r\n    if (Array.isArray(value)) {\r\n      for (let j = 0; j < value.length; j++) {\r\n        if (samePoint(field, value[j])) {\r\n          return true;\r\n        }\r\n      }\r\n    } else if (samePoint(field, value)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport default class MoveHandler extends PropertyHandler<Point, BoardObject> {\r\n  nextNode(value: Point, player: PlainPlayer, propertyData: BoardObject) {\r\n    if (isThereMarkup(this.type, value, player.currentNode.properties)) {\r\n      return;\r\n    }\r\n\r\n    // add current move mark\r\n    const boardMarkup = new BoardMarkupObject(\r\n      this.type === 'B' ? player.config.currentMoveBlackMark : player.config.currentMoveWhiteMark,\r\n    );\r\n    boardMarkup.zIndex = 10;\r\n    player.board.addObjectAt(value.x, value.y, boardMarkup);\r\n\r\n    return boardMarkup;\r\n  }\r\n\r\n  previousNode(value: Point, player: PlainPlayer, propertyData: BoardObject) {\r\n    return this.nextNode(value, player, propertyData);\r\n  }\r\n\r\n  beforeNextNode(value: Point, player: PlainPlayer, propertyData: BoardObject): BoardObject {\r\n    if (propertyData) {\r\n      player.board.removeObject(propertyData);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  beforePreviousNode(value: Point, player: PlainPlayer, propertyData: BoardObject): BoardObject {\r\n    return this.beforeNextNode(value, player, propertyData);\r\n  }\r\n}\r\n","import { BoardObject, BoardLineObject } from '../../CanvasBoard';\r\nimport PlainPlayer from '../PlainPlayer';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Vector } from '../../types';\r\n\r\nexport default class MarkupLineHandler extends PropertyHandler<Vector[], BoardObject[]> {\r\n  nextNode(values: Vector[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    const objects: BoardObject[] = [];\r\n\r\n    values.forEach((value) => {\r\n      // add markup\r\n      const boardMarkup = new BoardLineObject(this.type, value[0], value[1]);\r\n      boardMarkup.zIndex = 10;\r\n      player.board.addObject(boardMarkup);\r\n      objects.push(boardMarkup);\r\n    });\r\n\r\n    return objects;\r\n  }\r\n\r\n  previousNode(values: Vector[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.nextNode(values, player, propertyData);\r\n  }\r\n\r\n  beforeNextNode(values: Vector[], player: PlainPlayer, propertyData: BoardObject[]): BoardObject[] {\r\n    propertyData.forEach((object) => {\r\n      player.board.removeObject(object);\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  beforePreviousNode(values: Vector[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.beforeNextNode(values, player, propertyData);\r\n  }\r\n}\r\n","import { BoardObject, BoardLabelObject } from '../../CanvasBoard';\r\nimport PlainPlayer from '../PlainPlayer';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Point, Label } from '../../types';\r\n\r\nexport default class MarkupLabelHandler extends PropertyHandler<Label[], BoardObject[]> {\r\n  constructor() {\r\n    super('LB');\r\n  }\r\n\r\n  nextNode(values: Label[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    const objects: BoardObject[] = [];\r\n\r\n    values.forEach((value) => {\r\n      // add markup\r\n      const boardMarkup = new BoardLabelObject(value.text, player.game.getStone(value.x, value.y));\r\n      boardMarkup.zIndex = 10;\r\n      player.board.addObjectAt(value.x, value.y, boardMarkup);\r\n      objects.push(boardMarkup);\r\n    });\r\n\r\n    return objects;\r\n  }\r\n\r\n  previousNode(values: Label[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.nextNode(values, player, propertyData);\r\n  }\r\n\r\n  beforeNextNode(values: Label[], player: PlainPlayer, propertyData: BoardObject[]): BoardObject[] {\r\n    propertyData.forEach((object) => {\r\n      player.board.removeObject(object);\r\n    });\r\n\r\n    return null;\r\n  }\r\n\r\n  beforePreviousNode(values: Label[], player: PlainPlayer, propertyData: BoardObject[]) {\r\n    return this.beforeNextNode(values, player, propertyData);\r\n  }\r\n}\r\n","import PlainPlayer from '../PlainPlayer';\r\nimport PropertyHandler from './PropertyHandler';\r\nimport { Vector } from '../../types';\r\nimport { BoardViewport } from '../../CanvasBoard/types';\r\n\r\nexport default class ViewportHandler extends PropertyHandler<Vector, BoardViewport> {\r\n  constructor() {\r\n    super('VW');\r\n  }\r\n\r\n  nextNode(value: Vector, player: PlainPlayer, propertyData: BoardViewport) {\r\n    const currentViewport = player.board.getViewport();\r\n\r\n    if (value) {\r\n      const minX = Math.min(value[0].x, value[1].x);\r\n      const minY = Math.min(value[0].y, value[1].y);\r\n      const maxX = Math.max(value[0].x, value[1].x);\r\n      const maxY = Math.max(value[0].y, value[1].y);\r\n\r\n      player.board.setViewport({\r\n        left: minX,\r\n        top: minY,\r\n        right: player.board.getSize() - maxX - 1,\r\n        bottom: player.board.getSize() - maxY - 1,\r\n      });\r\n    } else {\r\n      player.board.setViewport({\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n      });\r\n    }\r\n\r\n    return currentViewport;\r\n  }\r\n\r\n  beforePreviousNode(value: Vector, player: PlainPlayer, propertyData: BoardViewport): BoardViewport {\r\n    player.board.setViewport(propertyData);\r\n\r\n    return null;\r\n  }\r\n}\r\n","import makeConfig, { PartialRecursive } from '../utils/makeConfig';\r\nimport CanvasBoard, { defaultBoardConfig, BoardObject, FieldObject } from '../CanvasBoard';\r\nimport PlayerBase from './PlayerBase';\r\nimport { CanvasBoardTheme } from '../CanvasBoard/types';\r\nimport { DrawHandler, Circle } from '../CanvasBoard/drawHandlers';\r\nimport MarkupHandler from './propertyHandlers/MarkupHandler';\r\nimport MoveHandler from './propertyHandlers/MoveHandler';\r\nimport MarkupLineHandler from './propertyHandlers/MarkupLineHandler';\r\nimport { Color } from '../types';\r\nimport MarkupLabelHandler from './propertyHandlers/MarkupLabelHandler';\r\nimport ViewportHandler from './propertyHandlers/ViewportHandler';\r\n\r\nexport interface PlainPlayerConfig {\r\n  boardTheme: CanvasBoardTheme;\r\n  currentMoveBlackMark: DrawHandler;\r\n  currentMoveWhiteMark: DrawHandler;\r\n  enableMouseWheel: boolean;\r\n  enableKeys: boolean;\r\n}\r\n\r\nexport const defaultPlainPlayerConfig: PlainPlayerConfig = {\r\n  boardTheme: defaultBoardConfig.theme,\r\n  currentMoveBlackMark: new Circle({ color: 'rgba(255,255,255,0.8)' }),\r\n  currentMoveWhiteMark: new Circle({ color: 'rgba(0,0,0,0.8)' }),\r\n  enableMouseWheel: true,\r\n  enableKeys: true,\r\n};\r\n\r\nexport const plainPlayerPropertyHandlers = [\r\n  new MarkupHandler('CR'),\r\n  new MarkupHandler('DD'),\r\n  new MarkupHandler('MA'),\r\n  new MarkupHandler('SL'),\r\n  new MarkupHandler('SQ'),\r\n  new MarkupHandler('TR'),\r\n  new MarkupLabelHandler(),\r\n  new MarkupLineHandler('AR'),\r\n  new MarkupLineHandler('LN'),\r\n  new MoveHandler('B'),\r\n  new MoveHandler('W'),\r\n  new ViewportHandler(),\r\n];\r\n\r\nconst colorsMap: { [key: string]: Color } = {\r\n  B: Color.BLACK,\r\n  W: Color.WHITE,\r\n};\r\n\r\nexport default class PlainPlayer extends PlayerBase {\r\n  element: HTMLElement;\r\n  config: PlainPlayerConfig;\r\n  board: CanvasBoard;\r\n  stoneBoardsObjects: FieldObject[];\r\n  _mouseWheelEvent: EventListenerOrEventListenerObject;\r\n  _keyEvent: EventListenerOrEventListenerObject;\r\n\r\n  constructor(element: HTMLElement, config: PartialRecursive<PlainPlayerConfig> = {}) {\r\n    super();\r\n\r\n    // merge user config with default\r\n    this.element = element;\r\n    this.config = makeConfig(defaultPlainPlayerConfig, config);\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.board = new CanvasBoard(this.element, {\r\n      theme: this.config.boardTheme,\r\n    });\r\n    this.stoneBoardsObjects = [];\r\n\r\n    this.registerPropertyHandlers(plainPlayerPropertyHandlers);\r\n    this.on('afterMove', () => this.updateStones());\r\n    this.on('previousNode', () => this.updateStones());\r\n\r\n    if (this.element.tabIndex < 0) {\r\n      this.element.tabIndex = 1;\r\n    }\r\n\r\n    document.addEventListener('mousewheel', this._mouseWheelEvent = (e: any) => {\r\n      if (document.activeElement === this.element && this.config.enableMouseWheel) {\r\n        if (e.deltaY > 0) {\r\n          this.next();\r\n        } else if (e.deltaY < 0) {\r\n          this.previous();\r\n        }\r\n\r\n        return false;\r\n      }\r\n    });\r\n\r\n    document.addEventListener('keydown', this._keyEvent = (e: any) => {\r\n      if (document.activeElement === this.element && this.config.enableKeys) {\r\n        if (e.key === 'ArrowRight') {\r\n          this.next();\r\n        } else if (e.key === 'ArrowLeft') {\r\n          this.previous();\r\n        }\r\n\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    document.removeEventListener('mousewheel', this._mouseWheelEvent);\r\n    this._mouseWheelEvent = null;\r\n    document.removeEventListener('keydown', this._keyEvent);\r\n\r\n  }\r\n\r\n  protected updateStones() {\r\n    // Remove missing stones in current position\r\n    this.stoneBoardsObjects = this.stoneBoardsObjects.filter((boardObject) => {\r\n      if (this.game.getStone(boardObject.x, boardObject.y) !== colorsMap[boardObject.type as string]) {\r\n        this.board.removeObject(boardObject);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    // Add new stones from current position\r\n    const position = this.game.position;\r\n\r\n    for (let x = 0; x < position.size; x++) {\r\n      for (let y = 0; y < position.size; y++) {\r\n        const c = position.get(x, y);\r\n        if (c && !this.stoneBoardsObjects.some(\r\n          boardObject => boardObject.x === x && boardObject.y === y && c === colorsMap[boardObject.type as string],\r\n        )) {\r\n          const boardObject = new FieldObject(c === Color.B ? 'B' : 'W');\r\n          this.board.addObjectAt(x, y, boardObject);\r\n          this.stoneBoardsObjects.push(boardObject);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import EventEmitter from '../utils/EventEmitter';\r\nimport KifuNode, { Path } from './KifuNode';\r\nimport Game from '../Game/Game';\r\nimport { PropIdent } from '../SGFParser/sgfTypes';\r\nimport goRules, { JAPANESE_RULES } from '../Game/rules';\r\nimport { Color, Point } from '../types';\r\n\r\n/**\r\n * Contains functionality to create, edit and manipulate go game record. It is basically virtual player\r\n * with API without board and any UI.\r\n */\r\nexport default class KifuReader extends EventEmitter {\r\n  rootNode: KifuNode;\r\n  currentNode: KifuNode;\r\n  game: Game;\r\n\r\n  constructor(rootNode: KifuNode = new KifuNode()) {\r\n    super();\r\n\r\n    this.rootNode = rootNode;\r\n    this.currentNode = rootNode;\r\n\r\n    this.executeRootNode();\r\n    this.executeNode();\r\n  }\r\n\r\n  /**\r\n   * This will execute root node (root properties) once and initialize Game object\r\n   */\r\n  protected executeRootNode() {\r\n    const size = this.getRootProperty(PropIdent.BOARD_SIZE) || 19;\r\n    const rules = goRules[this.getRootProperty(PropIdent.RULES) as keyof typeof goRules] || JAPANESE_RULES;\r\n    const handicap = this.getRootProperty(PropIdent.HANDICAP) || 0;\r\n\r\n    this.game = new Game(size, rules);\r\n    if (handicap > 1) {\r\n      this.game.turn = Color.WHITE;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes node. It will go through its properties and make changes in game object.\r\n   */\r\n  protected executeNode() {\r\n    // first process setup\r\n    const addBlack: Point[] = this.getProperty(PropIdent.ADD_BLACK) || [];\r\n    const addWhite: Point[] = this.getProperty(PropIdent.ADD_WHITE) || [];\r\n    const clear: Point[] = this.getProperty(PropIdent.CLEAR_FIELD) || [];\r\n\r\n    addBlack.forEach(p => this.game.setStone(p.x, p.y, Color.BLACK));\r\n    addWhite.forEach(p => this.game.setStone(p.x, p.y, Color.WHITE));\r\n    clear.forEach(p => this.game.setStone(p.x, p.y, Color.EMPTY));\r\n\r\n    // then play a move\r\n    const blackMove: Point = this.getProperty(PropIdent.BLACK_MOVE);\r\n    const whiteMove: Point = this.getProperty(PropIdent.WHITE_MOVE);\r\n\r\n    if (blackMove !== undefined && whiteMove !== undefined) {\r\n      throw 'Some error';\r\n    }\r\n\r\n    if (blackMove !== undefined) {\r\n      if (blackMove) {\r\n        this.game.position.applyMove(blackMove.x, blackMove.y, Color.BLACK, true, true);\r\n      } else {\r\n        // pass\r\n        this.game.position.turn = Color.WHITE;\r\n      }\r\n    } else if (whiteMove !== undefined) {\r\n      if (whiteMove) {\r\n        this.game.position.applyMove(whiteMove.x, whiteMove.y, Color.WHITE, true, true);\r\n      } else {\r\n        // pass\r\n        this.game.position.turn = Color.BLACK;\r\n      }\r\n    }\r\n\r\n    // set turn\r\n    const turn: Color.BLACK | Color.WHITE = this.getProperty(PropIdent.SET_TURN);\r\n\r\n    if (turn) {\r\n      this.game.turn = turn;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This will revert game changes of current node and re-execute it. Use this, after KifuNode properties are updated.\r\n   */\r\n  resetNode() {\r\n    if (this.currentNode.parent) {\r\n      // update normal node\r\n      this.game.popPosition();\r\n      this.game.pushPosition(this.game.position.clone());\r\n      this.executeNode();\r\n    } else {\r\n      // update root node\r\n      this.executeRootNode();\r\n      this.executeNode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets property of current node.\r\n   *\r\n   * @param propIdent\r\n   */\r\n  getProperty(propIdent: PropIdent) {\r\n    return this.currentNode.getProperty(propIdent);\r\n  }\r\n\r\n  /**\r\n   * Gets property of root node.\r\n   *\r\n   * @param propIdent\r\n   */\r\n  getRootProperty(propIdent: PropIdent) {\r\n    return this.rootNode.getProperty(propIdent);\r\n  }\r\n\r\n  /**\r\n   * Returns array of next nodes (children).\r\n   */\r\n  getNextNodes() {\r\n    return this.currentNode.children;\r\n  }\r\n\r\n  /**\r\n   * Go to a next node and executes it (updates game object).\r\n   * @param node\r\n   */\r\n  next(node: number | KifuNode = 0) {\r\n    if (this.currentNode.children.length) {\r\n      let i: number;\r\n\r\n      if (typeof node === 'number') {\r\n        i = node;\r\n      } else {\r\n        i = this.currentNode.children.indexOf(node);\r\n      }\r\n\r\n      if (this.currentNode.children[i]) {\r\n        this.game.pushPosition(this.game.position.clone());\r\n        this.currentNode = this.currentNode.children[i];\r\n        this.executeNode();\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Go to the previous node.\r\n   */\r\n  previous() {\r\n    if (this.currentNode.parent) {\r\n      this.game.popPosition();\r\n      this.currentNode = this.currentNode.parent;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Go to the first position - root node.\r\n   */\r\n  first() {\r\n    this.game.clear();\r\n    this.currentNode = this.rootNode;\r\n  }\r\n\r\n  /**\r\n   * Go to the last position.\r\n   */\r\n  last() {\r\n    while (this.next()) {}\r\n  }\r\n\r\n  /**\r\n   * Go to specified path.\r\n   */\r\n  goTo(pathOrMoveNumber: Path | number) {\r\n    const path = typeof pathOrMoveNumber === 'number' ? { depth: pathOrMoveNumber, forks: [] } : pathOrMoveNumber;\r\n    this.first();\r\n\r\n    for (let i = 0, j = 0; i < path.depth; i++) {\r\n      if (this.currentNode.children.length > 1) {\r\n        this.next(path.forks[j++]);\r\n      } else {\r\n        this.next();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Go to previous fork (a node with more than one child).\r\n\t */\r\n  previousFork() {\r\n    while (this.previous()) {\r\n      if (this.currentNode.children.length > 1) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}