{"version":3,"sources":["hooks/useGoBoard.ts","components/GoBoard.tsx"],"names":["isGoBoardActionData","x","isObject","indexOf","isAction","action","updatedAt","obj","size","grid","length","some","c","Color","B","W","E","capCount","black","white","turn","e","isPositionData","position","useGoBoard","roomId","userId","receiveData","lastActionDataRef","useRef","broadcastData","useBroadcastData","sendActionData","useCallback","actionData","Date","now","goBoard","current","useRoomData","data","useEffect","createGoBoard","element","setColor","setCapCount","game","Game","board","CanvasBoard","theme","themes","modernTheme","width","clientWidth","fieldObjects","markerObject","updateFieldObjects","filter","getStone","y","type","removeObject","get","FieldObject","addObjectAt","push","BoardMarkupObject","hoverObject","clearHoverObject","on","_event","pos","isValid","play","_action","positionData","Position","createPosition","pushPosition","pass","undo","popPosition","resize","setWidth","GoBoard","React","memo","actionsRef","useState","color","divRef","div","actions","window","addEventListener","removeEventListener","className","onClick","ref"],"mappings":"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","file":"static/js/6.4c25bcb6.chunk.js","sourcesContent":["import { useCallback, useRef, useEffect } from \"react\";\nimport { Color } from \"wgo\";\n\nimport { isObject } from \"../utils/types\";\nimport { useRoomData, useBroadcastData } from \"./useRoom\";\n\nexport type PositionData = {\n  size: number;\n  grid: Color[];\n  capCount: { black: number; white: number };\n  turn: Color.B | Color.W;\n};\n\nconst isPositionData = (x: unknown): x is PositionData => {\n  try {\n    const obj = x as PositionData;\n    if (typeof obj.size !== \"number\") return false;\n    if (obj.grid.length !== obj.size * obj.size) return false;\n    if (obj.grid.some((c) => c !== Color.B && c !== Color.W && c !== Color.E)) {\n      return false;\n    }\n    if (\n      typeof obj.capCount.black !== \"number\" ||\n      typeof obj.capCount.white !== \"number\"\n    ) {\n      return false;\n    }\n    if (obj.turn !== Color.B && obj.turn !== Color.W) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type Action = \"play\" | \"pass\" | \"undo\";\n\nconst isAction = (x: unknown): x is Action =>\n  [\"play\", \"pass\", \"undo\"].indexOf(x as string) >= 0;\n\ntype GoBoardActionData = {\n  action: \"play\" | \"pass\" | \"undo\";\n  position: PositionData;\n  updatedAt: number; // in millisecond\n};\n\nconst isGoBoardActionData = (x: unknown): x is GoBoardData =>\n  isObject(x) &&\n  isAction((x as { action: unknown }).action) &&\n  typeof (x as { updatedAt: unknown }).updatedAt === \"number\" &&\n  isPositionData((x as { position: unknown }).position);\n\ntype GoBoardData =\n  | {\n      goBoard: \"init\";\n    }\n  | {\n      goBoard: \"action\";\n      actionData: GoBoardActionData;\n    };\n\nconst isGoBoardData = (x: unknown): x is GoBoardData =>\n  isObject(x) &&\n  ((x as { goBoard: unknown }).goBoard === \"init\" ||\n    ((x as { goBoard: unknown }).goBoard === \"action\" &&\n      isGoBoardActionData((x as { actionData: unknown }).actionData)));\n\nexport const useGoBoard = (\n  roomId: string,\n  userId: string,\n  receiveData: (action: Action, position: PositionData) => void\n) => {\n  const lastActionDataRef = useRef<GoBoardActionData>();\n\n  const broadcastData = useBroadcastData(roomId, userId);\n  const sendActionData = useCallback(\n    (action: Action, position: PositionData) => {\n      const actionData: GoBoardActionData = {\n        action,\n        position,\n        updatedAt: Date.now(),\n      };\n      const data: GoBoardData = {\n        goBoard: \"action\",\n        actionData,\n      };\n      broadcastData(data);\n      lastActionDataRef.current = actionData;\n    },\n    [broadcastData]\n  );\n\n  useRoomData(\n    roomId,\n    userId,\n    useCallback(\n      (data) => {\n        if (!isGoBoardData(data)) return;\n        if (data.goBoard === \"init\") {\n          if (lastActionDataRef.current) {\n            // TODO we don't need to broadcastData but sendData is enough\n            broadcastData({\n              goBoard: \"action\",\n              actionData: lastActionDataRef.current,\n            });\n          }\n          return;\n        }\n        // FIXME why do we need this type assertion?\n        const { actionData } = data as { actionData: GoBoardActionData };\n        if (\n          lastActionDataRef.current &&\n          lastActionDataRef.current.updatedAt > actionData.updatedAt\n        ) {\n          return;\n        }\n        lastActionDataRef.current = actionData;\n        receiveData(actionData.action, actionData.position);\n      },\n      [broadcastData, receiveData]\n    )\n  );\n\n  useEffect(() => {\n    broadcastData({\n      goBoard: \"init\",\n    });\n  }, [broadcastData]);\n\n  return {\n    sendActionData,\n  };\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  Game,\n  Color,\n  CanvasBoard,\n  themes,\n  FieldObject,\n  BoardMarkupObject,\n  Position,\n} from \"wgo\";\n\nimport \"./GoBoard.css\";\nimport { useGoBoard, Action, PositionData } from \"../hooks/useGoBoard\";\n\nconst createPosition = (positionData: PositionData) => {\n  const position = new Position(positionData.size);\n  position.grid = positionData.grid;\n  position.capCount = positionData.capCount;\n  position.turn = positionData.turn;\n  return position;\n};\n\nconst createGoBoard = (\n  element: HTMLDivElement,\n  setColor: (c: \"black\" | \"white\") => void,\n  setCapCount: (capCount: { black: number; white: number }) => void,\n  sendActionData: (action: Action, positionData: PositionData) => void\n) => {\n  const game = new Game(6);\n  const board = new CanvasBoard(element, {\n    theme: themes.modernTheme,\n    width: element.clientWidth,\n    size: 6,\n  });\n  let fieldObjects: FieldObject[] = [];\n  let markerObject: BoardMarkupObject | null | false = null;\n  const updateFieldObjects = () => {\n    fieldObjects = fieldObjects.filter((obj) => {\n      if (\n        game.getStone(obj.x, obj.y) !== (obj.type === \"B\" ? Color.B : Color.W)\n      ) {\n        board.removeObject(obj);\n        return false;\n      }\n      return true;\n    });\n    if (markerObject) {\n      board.removeObject(markerObject);\n    }\n    markerObject = null;\n    for (let x = 0; x < game.position.size; x += 1) {\n      for (let y = 0; y < game.position.size; y += 1) {\n        const c = game.position.get(x, y);\n        if (\n          c &&\n          !fieldObjects.some(\n            (obj) =>\n              obj.x === x &&\n              obj.y === y &&\n              c === (obj.type === \"B\" ? Color.B : Color.W)\n          )\n        ) {\n          const obj = new FieldObject(c === Color.B ? \"B\" : \"W\");\n          board.addObjectAt(x, y, obj);\n          fieldObjects.push(obj);\n          if (markerObject === null) {\n            markerObject = new BoardMarkupObject(\"SQ\", c);\n            board.addObjectAt(x, y, markerObject);\n          } else if (markerObject) {\n            // we don't know what is the last move\n            board.removeObject(markerObject);\n            markerObject = false; // don't put marker this time\n          }\n        }\n      }\n    }\n  };\n  let hoverObject: FieldObject | null = null;\n  const clearHoverObject = () => {\n    if (hoverObject) {\n      board.removeObject(hoverObject);\n      hoverObject = null;\n    }\n  };\n  board.on(\"mousemove\", (_event, pos) => {\n    const isValid = pos && game.isValid(pos.x, pos.y);\n    if (!isValid) {\n      clearHoverObject();\n      return;\n    }\n    if (!hoverObject) {\n      hoverObject = new FieldObject(game.turn === Color.B ? \"B\" : \"W\");\n    } else if (hoverObject.x === pos.x && hoverObject.y === pos.y) {\n      return;\n    } else {\n      board.removeObject(hoverObject);\n    }\n    board.addObjectAt(pos.x, pos.y, hoverObject);\n  });\n  board.on(\"mouseout\", clearHoverObject);\n  board.on(\"click\", (_event, { x, y }) => {\n    const isValid = game.isValid(x, y);\n    if (isValid) {\n      clearHoverObject();\n      game.play(x, y);\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      sendActionData(\"play\", game.position);\n    }\n  });\n  setColor(game.turn === Color.B ? \"black\" : \"white\");\n  const receiveData = (_action: Action, positionData: PositionData) => {\n    const position = createPosition(positionData);\n    game.pushPosition(position);\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    clearHoverObject();\n  };\n  const pass = () => {\n    game.pass();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    sendActionData(\"pass\", game.position);\n  };\n  const undo = () => {\n    game.popPosition();\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    sendActionData(\"undo\", game.position);\n  };\n  const resize = () => {\n    board.setWidth(element.clientWidth);\n  };\n  return { receiveData, pass, undo, resize };\n};\n\nexport const GoBoard = React.memo<{\n  roomId: string;\n  userId: string;\n}>(({ roomId, userId }) => {\n  const actionsRef = useRef<{\n    receiveData: (action: Action, positionData: PositionData) => void;\n    pass: () => void;\n    undo: () => void;\n    resize: () => void;\n  }>();\n  const receiveData = useCallback(\n    (action: Action, positionData: PositionData) => {\n      if (actionsRef.current) {\n        actionsRef.current.receiveData(action, positionData);\n      }\n    },\n    []\n  );\n  const { sendActionData } = useGoBoard(roomId, userId, receiveData);\n  const [color, setColor] = useState<\"black\" | \"white\">(\"black\");\n  const [capCount, setCapCount] = useState<{\n    black: number;\n    white: number;\n  }>({ black: 0, white: 0 });\n  const divRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divRef.current) {\n      const div = divRef.current;\n      const actions = createGoBoard(div, setColor, setCapCount, sendActionData);\n      actionsRef.current = actions;\n      window.addEventListener(\"resize\", actions.resize);\n      return () => {\n        window.removeEventListener(\"resize\", actions.resize);\n      };\n    }\n    return undefined;\n  }, [sendActionData]);\n  const pass = () => {\n    if (actionsRef.current) {\n      actionsRef.current.pass();\n    }\n  };\n  const undo = () => {\n    if (actionsRef.current) {\n      actionsRef.current.undo();\n    }\n  };\n  return (\n    <div className=\"GoBoard-container\">\n      <div className=\"GoBoard-toolbar\">\n        Next Turn: {color === \"black\" ? \"Black\" : \"White\"}\n        <button type=\"button\" onClick={pass}>\n          Pass\n        </button>\n        <button type=\"button\" onClick={undo}>\n          Undo\n        </button>\n        <div>\n          Capture Count: Black {capCount.black}, White {capCount.white}\n        </div>\n      </div>\n      <div className=\"GoBoard-canvas\" ref={divRef} />\n    </div>\n  );\n});\n\nexport default GoBoard;\n"],"sourceRoot":""}